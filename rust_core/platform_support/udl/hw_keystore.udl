// Error type returned from native code
[Error]
interface KeyStoreError {
    KeyError(string reason); // All exceptions in native code are represented by this error
    BridgingError(string reason); // Reserved for UnexpectedUniFFICallbackError
};

[Error]
interface UtilitiesError {
    BridgingError(string reason); // Reserved for UnexpectedUniFFICallbackError
};

// The KeyStoreBridge acts as the factory for SigningKeyBridge entities
// Note that a SigningKeyBridge created with the same identifier will have the same underlying
// private key, even if created by a different KeyStoreBridge instance.
callback interface KeyStoreBridge {
    [Throws=KeyStoreError]
    SigningKeyBridge get_or_create_signing_key(string identifier);

    [Throws=KeyStoreError]
    EncryptionKeyBridge get_or_create_encryption_key(string identifier);
};

callback interface UtilitiesBridge {
    [Throws=UtilitiesError]
    string get_storage_path();
};

// This represents the actual private ECDSA key stored in hardware
callback interface SigningKeyBridge {
    [Throws=KeyStoreError]
    sequence<u8> public_key(); // The public key in DER encoding

    [Throws=KeyStoreError]
    sequence<u8> sign(sequence<u8> payload); // Returns a DER encoded signature
};

// This represents the actual private Symmetric key stored in hardware
callback interface EncryptionKeyBridge {
    [Throws=KeyStoreError]
    sequence<u8> encrypt(sequence<u8> payload); // Returns encrypted payload

    [Throws=KeyStoreError]
    sequence<u8> decrypt(sequence<u8> payload); // Returns decrypted payload
};

namespace hw_keystore { //TODO: Rename -> platform_support
    // Initialization function, this MUST be called by native code before Rust is able
    // to use the KeyStoreBridge callbacks
    void init_hw_keystore(KeyStoreBridge bridge);

    // Initialization function, this MUST be called by native code before Rust is able
    // to use the UtilitiesBridge callbacks
    void init_utilities(UtilitiesBridge bridge);
};
