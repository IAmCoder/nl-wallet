plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.example.platform_support'
    compileSdk 33

    defaultConfig {
        minSdk 23
        targetSdk 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
            // UniFFI generated bindings
            kotlin.srcDirs += "../../kotlin"
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.9.0'
    implementation "net.java.dev.jna:jna:5.7.0@aar" // Java Native Access

    // Test dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

// Register a task to build the Rust code and copy the resulting library files
[
        Debug  : null,
        Profile: '--release',
        Release: '--release'
].each {
    def taskPostfix = it.key
    def profileMode = it.value
    tasks.whenTaskAdded { task ->
        if (task.name == "javaPreCompile$taskPostfix") {
            task.dependsOn "cargoBuildNativeBindings$taskPostfix"
            task.dependsOn "cargoBuildNativeLibrary$taskPostfix"
        }
    }
    tasks.register("cargoBuildNativeBindings$taskPostfix", Exec) {
        workingDir "../../"

        fileTree("$workingDir").matching {
            include "**/*.udl"
        }.each {
            // Use file name as module name
            String moduleName = it.name.take(it.name.lastIndexOf('.'))

            // Generate Kotlin <> Rust bindings
            commandLine 'sh',
                    'generate_native_bindings.sh',
                    "$moduleName",
                    'kotlin'
        }
    }
    tasks.register("cargoBuildNativeLibrary$taskPostfix", Exec) {
        workingDir "../../"

        // Build the Rust code (platform_support)
        commandLine 'cargo', 'ndk',
                '-t', 'armeabi-v7a',
                '-t', 'arm64-v8a',
                '-t', 'x86_64',
                '-o', 'android/platform_support/src/main/jniLibs',
                'build'

        if (profileMode != null) {
            args profileMode
        }
    }
}