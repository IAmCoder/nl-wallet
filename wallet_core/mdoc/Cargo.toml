[package]
name = "nl_wallet_mdoc"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[[test]]
name = "test"
path = "tests/tests.rs"
required-features = ["integration"]

[features]
# Allow the disclosure return URL and its prefix to use http://
allow_http_return_url = []
# Include code for generating certificates and keys
generate = ["dep:rcgen"]
# Include examples from the ISO specification
examples = ["dep:anyhow", "dep:hex-literal", "dep:once_cell"]
# Implement the MdocEcdsaKey trait on SoftwareEcdsaKey
software_keys = ["wallet_common/software_keys"]
# Include SoftwareKeyFactory, which implements KeyFactory for testing
software_key_factory = ["software_keys", "dep:parking_lot"]
# Include MdocsMap, which can be used for tests that store Mdocs
mdocs_map = []
# Include miscellaneous test utilities
test = ["dep:assert_matches", "dep:parking_lot", "dep:rstest", "dep:regex"]
# Include mock implementations and constructors for testing
mock = []
# Include MockTimeGenerator, which can be used to mock the curren time for testing purposes
mock_time = ["dep:parking_lot"]
# All features needed to run the integration test
integration = ["generate", "software_key_factory", "test", "mock"]

[dependencies]
aes-gcm = { workspace = true, features = ["std"] }
assert_matches = { workspace = true, optional = true }
base64.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
ciborium.workspace = true
coset = { workspace = true, features = ["std"] }
dashmap.workspace = true
derive_more.workspace = true
futures = { workspace = true, features = ["std", "async-await"] }
hex.workspace = true
indexmap = { workspace = true, features = ["serde"] }
itertools.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdh", "ecdsa", "pem", "serde", "std"] }
rand_core.workspace = true
reqwest = { workspace = true, features = ["json"] }
ring.workspace = true
rustls-webpki.workspace = true
serde = { workspace = true, features = ["serde_derive"] }
serde-aux.workspace = true
serde_bytes = { workspace = true, features = ["std"] }
serde_json.workspace = true
serde_repr.workspace = true
serde_urlencoded.workspace = true
serde_with = { workspace = true, features = ["base64", "chrono", "hex"] }
strfmt.workspace = true
strum = { workspace = true, features = ["derive"] }
thiserror.workspace = true
time.workspace = true
tokio = { workspace = true, features = ["rt", "time", "parking_lot"] }
tracing.workspace = true
url = { workspace = true, features = ["serde"] }
x509-parser = { workspace = true, features = ["verify", "validate"] }

anyhow = { workspace = true, optional = true }
hex-literal = { workspace = true, optional = true }
once_cell = { workspace = true, optional = true, features = ["parking_lot"] }
parking_lot = { workspace = true, optional = true }
rcgen = { workspace = true, optional = true, features = ["x509-parser"] }
regex = { workspace = true, optional = true }
rstest = { workspace = true, optional = true }

wallet_common.path = "../wallet_common"

[dev-dependencies]
anyhow.workspace = true
assert_matches.workspace = true
hex-literal.workspace = true
http.workspace = true
once_cell = { workspace = true, features = ["parking_lot"] }
parking_lot.workspace = true
rcgen = { workspace = true, features = ["x509-parser"] }
regex.workspace = true
rstest.workspace = true
tokio = { workspace = true, features = ["macros"] }

wallet_common = { path = "../wallet_common", features = ["mock_secure_keys", "software_keys"] }
