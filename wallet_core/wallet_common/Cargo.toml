[package]
name = "wallet_common"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[lib]
doctest = false

[features]
# Implement SecureEcdsaKey and EphemeralEcdsaKey on p256 key
# and implement SecureEncryptionKey on aes-gcm cipher.
mock_secure_keys = []
# Include SoftwareEcdsaKey, which implements EcdsaKey and related traits for testing
software_keys = ["mock_secure_keys", "dep:parking_lot", "dep:rand_core"]
# Enable helper code for integration tests
integration_test = []
# Enable sentry feature
sentry = ["dep:sentry"]

[dependencies]
aes-gcm = { workspace = true, features = ["std"] }
base64.workspace = true
chrono = { workspace = true, features = ["std", "clock"] }
config.workspace = true
etag.workspace = true
futures.workspace = true
http.workspace = true
jsonwebtoken.workspace = true
mime.workspace = true
nutype = { workspace = true, features = ["serde"] }
once_cell = { workspace = true, features = ["parking_lot"] }
p256 = { workspace = true, features = ["ecdsa", "pem", "serde", "std"] }
rand.workspace = true
reqwest = { workspace = true, features = ["rustls-tls-webpki-roots"] }
ring.workspace = true
rustls-webpki.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["raw_value"] }
serde_with = { workspace = true, features = ["base64"] }
sha2.workspace = true
thiserror.workspace = true
tokio = { workspace = true, features = ["rt", "parking_lot"] }
url = { workspace = true, features = ["serde"] }

parking_lot = { workspace = true, optional = true }
rand_core = { workspace = true, optional = true }
sentry = { workspace = true, optional = true, features = ["backtrace", "contexts", "debug-images", "panic", "anyhow", "reqwest", "rustls", "tracing", "log"] }

[dev-dependencies]
aes-gcm = { workspace = true, features = ["std"] }
rand_core.workspace = true
rstest.workspace = true
tokio = { workspace = true, features = ["macros"] }
