[package]
name = "wallet_common"
version.workspace = true
edition.workspace = true
rust-version.workspace = true

[lints]
workspace = true

[lib]
doctest = false

[features]
# Allow the disclosure return URL and its prefix to use http://
allow_insecure_url = []
# Include implementations of the axum IntoResponse trait.
axum = ["dep:axum", "dep:tower-http", "dep:axum-server"]
# Include examples from the ISO specification
examples = ["dep:anyhow", "dep:hex", "dep:hex-literal"]
# Implement SecureEcdsaKey and EphemeralEcdsaKey on p256 key
# and implement SecureEncryptionKey on aes-gcm cipher.
mock_secure_keys = []
# Include MockAppleAttestedKey for generating Apple assertions in tests.
mock_apple_attested_key = ["apple_app_attest/mock", "dep:ciborium", "dep:rand_core"]
# Include MockHardwareEcdsaKey and MockHardwareEncryptionKey for use in tests
mock_hardware_keys = ["mock_secure_keys", "dep:parking_lot", "dep:rand_core"]
# Include MockRemoteEcdsaKey type and MockRemoteKeyFactory implementation of KeyFactory for testing
mock_remote_key = ["dep:parking_lot", "dep:rand_core"]
# Enable helper code for integration tests
integration_test = []
# Various test related functionality
insecure_http_client = []

[dependencies]
aes-gcm = { workspace = true, features = ["std"] }
base64.workspace = true
cfg-if.workspace = true
chrono = { workspace = true, features = ["std", "clock", "serde"] }
config.workspace = true
derive_more = { workspace = true, features = ["as_ref", "debug", "from", "into"] }
etag.workspace = true
futures = { workspace = true, features = ["std", "async-await"] }
http.workspace = true
indexmap = { workspace = true, features = ["serde"] }
itertools.workspace = true
jsonwebtoken = { workspace = true, features = ["use_pem"] }
mime.workspace = true
nutype = { workspace = true, features = ["serde"] }
p256 = { workspace = true, features = ["ecdsa", "pem", "serde", "std"] }
rand.workspace = true
reqwest = { workspace = true, features = ["rustls-tls-webpki-roots"] }
ring.workspace = true
rustls-webpki.workspace = true
serde = { workspace = true, features = ["derive"] }
serde_json = { workspace = true, features = ["raw_value"] }
serde_with = { workspace = true, features = ["base64"] }
sha2.workspace = true
strum = { workspace = true, features = ["derive"] }
thiserror.workspace = true
tokio = { workspace = true, features = ["rt", "parking_lot"] }
trait-variant.workspace = true
url = { workspace = true, features = ["serde"] }
x509-parser.workspace = true

anyhow = { workspace = true, optional = true }
ciborium = { workspace = true, optional = true }
axum = { workspace = true, optional = true, features = ["json"] }
axum-server = { workspace = true, optional = true, features = ["tls-rustls-no-provider"] }
hex = { workspace = true, optional = true }
hex-literal = { workspace = true, optional = true }
parking_lot = { workspace = true, optional = true }
rand_core = { workspace = true, optional = true }
tower-http = { workspace = true, optional = true, features = ["cors"] }

apple_app_attest.path = "../apple_app_attest"
error_category.path = "../error_category"

[dev-dependencies]
anyhow = { workspace = true }
assert_matches.workspace = true
aes-gcm = { workspace = true, features = ["std"] }
ciborium.workspace = true
hex = { workspace = true }
hex-literal = { workspace = true }
parking_lot.workspace = true
rand_core.workspace = true
rstest.workspace = true
tokio = { workspace = true, features = ["macros"] }

apple_app_attest = { path = "../apple_app_attest", features = ["mock"] }
