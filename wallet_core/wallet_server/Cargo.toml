[package]
name = "wallet_server"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
exclude = ["resources"]

[lints]
workspace = true

[lib]
doctest = false

[[test]]
name = "verifier_api"
path = "tests/verifier_api.rs"
required-features = ["cfg_test"]

[[test]]
name = "postgres"
path = "tests/postgres.rs"
required-features = ["postgres", "db_test"]

[features]
default = ["postgres"]
# Allow the disclosure return URL and its prefix to use http://
allow_http_return_url = ["nl_wallet_mdoc/allow_http_return_url"]
# Include session storage in PostgreSQL
postgres = ["dep:sea-orm"]
# Include and run test that depend on an external PostgreSQL database
db_test = []
# Include and run test that depend on a valid configuration file
cfg_test = []
# Enable issuance
issuance = [
    "axum/form",
    "dep:ciborium",
    "dep:futures",
    "dep:indexmap",
    "dep:reqwest",
    "dep:serde_urlencoded",
    "dep:openid4vc",
]
# Enable mock PID issuance
mock = ["dep:rand", "issuance"]
# Enable middleware that logs HTTP requests and responses
log_requests = ["dep:hyper"]

[dependencies]
anyhow.workspace = true
axum = { workspace = true, features = [
    "headers",
    "http1",
    "json",
    "query",
    "tokio",
    "tower-log",
    "tracing",
] }
base64.workspace = true
ciborium = { workspace = true, optional = true }
chrono = { workspace = true, features = ["clock", "serde", "std"] }
config = { workspace = true, features = ["toml"] }
dashmap = { workspace = true, features = ["serde"] }
futures = { workspace = true, optional = true }
http.workspace = true
hyper = { version = "0.14.27", optional = true, features = ["full"] }
indexmap = { workspace = true, optional = true, features = ["serde"] }
mime.workspace = true
nutype = { workspace = true, features = ["serde"] }
openssl = { workspace = true, features = ["vendored"] }
p256 = { workspace = true, features = ["ecdsa"] }
rand = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true, features = [
    "rustls-tls-webpki-roots",
] }
sea-orm = { workspace = true, optional = true, features = [
    "macros",
    "runtime-tokio-rustls",
    "sqlx-postgres",
    "with-chrono",
    "with-json",
] }
serde = { workspace = true, features = ["serde_derive"] }
serde_json.workspace = true
serde_urlencoded = { workspace = true, optional = true }
serde_with = { workspace = true, features = ["base64"] }
strfmt.workspace = true
strum = { workspace = true, features = ["derive"] }
thiserror.workspace = true
tokio = { workspace = true, features = [
    "macros",
    "parking_lot",
    "rt-multi-thread",
] }
tower-http = { workspace = true, features = ["auth", "cors", "trace"] }
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["parking_lot"] }
url = { workspace = true, features = ["serde"] }

nl_wallet_mdoc.path = "../mdoc"
openid4vc = { path = "../openid4vc", optional = true }
wallet_common.path = "../wallet_common"

[dev-dependencies]
indexmap.workspace = true
rstest.workspace = true

nl_wallet_mdoc = { path = "../mdoc", features = ["generate"] }
