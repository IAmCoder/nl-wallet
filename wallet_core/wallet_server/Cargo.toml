[package]
name = "wallet_server"
version.workspace = true
edition.workspace = true
rust-version.workspace = true
exclude = ["resources"]

[lints]
workspace = true

[[bin]]
name = "verification_server"
required-features = ["disclosure"]

[[bin]]
name = "pid_issuer"
required-features = ["issuance"]

[[bin]]
name = "wallet_server"
required-features = ["disclosure", "issuance"]

[lib]
doctest = false

[[test]]
name = "verifier_api"
path = "tests/verifier_api.rs"
required-features = ["verifier_test"]

[[test]]
name = "postgres"
path = "tests/postgres.rs"
required-features = ["db_test"]

[features]
default = ["disclosure", "postgres"]
# Allow the disclosure return URL and its prefix to use http://
allow_http_return_url = ["nl_wallet_mdoc/allow_http_return_url"]
# Include session storage in PostgreSQL
postgres = ["dep:sea-orm", "dep:serde_json", "dep:strum"]
# Include and run test that depend on an external PostgreSQL database
db_test = ["verifier_test", "postgres", "dep:serial_test", "nl_wallet_mdoc/test"]
verifier_test = [
    "disclosure",
    "dep:assert_matches",
    "dep:indexmap",
    "dep:parking_lot",
    "dep:serde_urlencoded",
    "tokio/macros",
    "tokio/test-util",
    "nl_wallet_mdoc/mock_time",
] # Include and run test that depend on a valid configuration file
# Enable issuance
issuance = [
    "axum/form",
    "dep:axum-extra",
    "dep:ciborium",
    "dep:futures",
    "dep:indexmap",
    "dep:reqwest",
    "dep:serde_json",
    "dep:serde_urlencoded",
    "dep:openid4vc",
]
# Enable disclosure
disclosure = ["serde_with/hex", "dep:ring"]
# Enable mock PID issuance
mock = ["dep:rand", "issuance"]

[dependencies]
anyhow.workspace = true
axum = { workspace = true, features = ["http1", "json", "query", "tokio", "tower-log", "tracing", "original-uri"] }
axum-extra = { workspace = true, optional = true, features = ["typed-header"] }
base64.workspace = true
cfg-if.workspace = true
chrono = { workspace = true, features = ["clock", "serde", "std"] }
config = { workspace = true, features = ["toml"] }
http.workspace = true
mime.workspace = true
nutype = { workspace = true, features = ["serde"] }
openssl = { workspace = true, features = ["vendored"] }
p256 = { workspace = true, features = ["ecdsa", "pkcs8"] }
sentry = { workspace = true, features = [
    "backtrace",
    "contexts",
    "debug-images",
    "panic",
    "anyhow",
    "reqwest",
    "rustls",
    "tracing",
    "log",
] }
serde = { workspace = true, features = ["derive"] }
serde_with = { workspace = true, features = ["base64"] }
thiserror.workspace = true
tokio = { workspace = true, features = ["parking_lot", "rt-multi-thread", "net"] }
tower-http = { workspace = true, features = ["auth", "cors", "trace"] }
tracing.workspace = true
tracing-subscriber = { workspace = true, features = ["parking_lot"] }
url = { workspace = true, features = ["serde"] }

assert_matches = { workspace = true, optional = true }
ciborium = { workspace = true, optional = true }
futures = { workspace = true, optional = true }
indexmap = { workspace = true, optional = true, features = ["serde"] }
parking_lot = { workspace = true, optional = true }
rand = { workspace = true, optional = true }
reqwest = { workspace = true, optional = true, features = ["rustls-tls-webpki-roots"] }
ring = { workspace = true, optional = true }
sea-orm = { workspace = true, optional = true, features = [
    "macros",
    "runtime-tokio-rustls",
    "sqlx-postgres",
    "with-chrono",
    "with-json",
] }
serde_json = { workspace = true, optional = true }
serde_urlencoded = { workspace = true, optional = true }
serial_test = { workspace = true, optional = true }
strum = { workspace = true, optional = true, features = ["derive"] }

nl_wallet_mdoc.path = "../mdoc"
openid4vc = { path = "../openid4vc", optional = true }
wallet_common = { path = "../wallet_common", features = ["sentry"] }

[dev-dependencies]
rstest.workspace = true
