def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

def overrideFlutterMinSdkVersion = 23
def overrideFlutterTargetSdkVersion = 33
def overrideFlutterCompileSdkVersion = 33

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
   keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion overrideFlutterCompileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
            // Include native libraries
            jniLibs.srcDirs += 'src/main/jniLibs'
        }
    }

    defaultConfig {
        applicationId "nl.rijksoverheid.edi.wallet"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-build-configuration.
        minSdkVersion overrideFlutterMinSdkVersion
        targetSdkVersion overrideFlutterTargetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
    }

    signingConfigs {
       release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file('../' + keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
       }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            ndk {
                abiFilters "arm64-v8a", "armeabi-v7a", "x86_64"
            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "net.java.dev.jna:jna:5.7.0@aar" // Java Native Access
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation project(path: ':platform_support')
}

// Target directory for the Rust library files
def jniTargetDir = "${project.projectDir}/src/main/jniLibs"

// Register tasks to build the Rust code and copy the resulting library files
[
        Debug  : null,
        Profile: '--release',
        Release: '--release'
].each {
    def taskPostfix = it.key
    def profileMode = it.value
    tasks.whenTaskAdded { task ->
        if (task.name == "javaPreCompile$taskPostfix") {
            task.dependsOn "cargoBuildNativeLibrary$taskPostfix"
        }
    }
    tasks.register("cargoBuildNativeLibrary$taskPostfix", Exec) {
        workingDir "../../rust_core"

        // Build the Rust code (rust_core)
        commandLine 'cargo', 'ndk',
                '-t', 'armeabi-v7a',
                '-t', 'arm64-v8a',
                '-t', 'x86_64',
                '-o', jniTargetDir,
                'build'
        if (profileMode != null) {
            args profileMode
        }
    }
}

clean.doFirst {
    println "Cleaning $jniTargetDir"
    delete jniTargetDir
}
