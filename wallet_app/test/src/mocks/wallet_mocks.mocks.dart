// Mocks generated by Mockito 5.4.0 from annotations
// in wallet/test/src/mocks/wallet_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i7;

import 'package:core_domain/core_domain.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:wallet/src/data/repository/authentication/digid_auth_repository.dart'
    as _i2;
import 'package:wallet/src/data/service/app_lifecycle_service.dart' as _i6;
import 'package:wallet/src/domain/model/navigation/navigation_request.dart'
    as _i9;
import 'package:wallet/src/domain/usecase/auth/update_digid_auth_status_usecase.dart'
    as _i10;
import 'package:wallet/src/domain/usecase/deeplink/decode_deeplink_usecase.dart'
    as _i8;
import 'package:wallet/src/domain/usecase/wallet/is_wallet_initialized_with_pid_usecase.dart'
    as _i11;
import 'package:wallet/src/domain/usecase/wallet/observe_wallet_lock_usecase.dart'
    as _i12;
import 'package:wallet/src/wallet_core/typed_wallet_core.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [DigidAuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDigidAuthRepository extends _i1.Mock
    implements _i2.DigidAuthRepository {
  @override
  _i3.Future<String> getAuthUrl() => (super.noSuchMethod(
        Invocation.method(
          #getAuthUrl,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  void notifyDigidStateUpdate(_i4.DigidState? state) => super.noSuchMethod(
        Invocation.method(
          #notifyDigidStateUpdate,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.Stream<_i2.DigidAuthStatus> observeAuthStatus() => (super.noSuchMethod(
        Invocation.method(
          #observeAuthStatus,
          [],
        ),
        returnValue: _i3.Stream<_i2.DigidAuthStatus>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.DigidAuthStatus>.empty(),
      ) as _i3.Stream<_i2.DigidAuthStatus>);
}

/// A class which mocks [TypedWalletCore].
///
/// See the documentation for Mockito's code generation for more information.
class MockTypedWalletCore extends _i1.Mock implements _i5.TypedWalletCore {
  @override
  _i3.Future<_i4.PinValidationResult> isValidPin(String? pin) =>
      (super.noSuchMethod(
        Invocation.method(
          #isValidPin,
          [pin],
        ),
        returnValue: _i3.Future<_i4.PinValidationResult>.value(
            _i4.PinValidationResult.ok),
        returnValueForMissingStub: _i3.Future<_i4.PinValidationResult>.value(
            _i4.PinValidationResult.ok),
      ) as _i3.Future<_i4.PinValidationResult>);
  @override
  _i3.Future<void> register(String? pin) => (super.noSuchMethod(
        Invocation.method(
          #register,
          [pin],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<bool> isRegistered() => (super.noSuchMethod(
        Invocation.method(
          #isRegistered,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
  @override
  _i3.Future<String> getDigidAuthUrl() => (super.noSuchMethod(
        Invocation.method(
          #getDigidAuthUrl,
          [],
        ),
        returnValue: _i3.Future<String>.value(''),
        returnValueForMissingStub: _i3.Future<String>.value(''),
      ) as _i3.Future<String>);
  @override
  _i3.Stream<_i4.UriFlowEvent> processUri(Uri? uri) => (super.noSuchMethod(
        Invocation.method(
          #processUri,
          [uri],
        ),
        returnValue: _i3.Stream<_i4.UriFlowEvent>.empty(),
        returnValueForMissingStub: _i3.Stream<_i4.UriFlowEvent>.empty(),
      ) as _i3.Stream<_i4.UriFlowEvent>);
}

/// A class which mocks [AppLifecycleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppLifecycleService extends _i1.Mock
    implements _i6.AppLifecycleService {
  @override
  _i3.Stream<_i7.AppLifecycleState> observe() => (super.noSuchMethod(
        Invocation.method(
          #observe,
          [],
        ),
        returnValue: _i3.Stream<_i7.AppLifecycleState>.empty(),
        returnValueForMissingStub: _i3.Stream<_i7.AppLifecycleState>.empty(),
      ) as _i3.Stream<_i7.AppLifecycleState>);
  @override
  void notifyStateChanged(_i7.AppLifecycleState? state) => super.noSuchMethod(
        Invocation.method(
          #notifyStateChanged,
          [state],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DecodeDeeplinkUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDecodeDeeplinkUseCase extends _i1.Mock
    implements _i8.DecodeDeeplinkUseCase {
  @override
  _i9.NavigationRequest? invoke(Uri? uri) => (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [uri],
        ),
        returnValueForMissingStub: null,
      ) as _i9.NavigationRequest?);
}

/// A class which mocks [UpdateDigidAuthStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateDigidAuthStatusUseCase extends _i1.Mock
    implements _i10.UpdateDigidAuthStatusUseCase {
  @override
  _i3.Future<void> invoke(_i4.DigidState? state) => (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [state],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [IsWalletInitializedWithPidUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockIsWalletInitializedWithPidUseCase extends _i1.Mock
    implements _i11.IsWalletInitializedWithPidUseCase {
  @override
  _i3.Future<bool> invoke() => (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
        returnValueForMissingStub: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}

/// A class which mocks [ObserveWalletLockUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockObserveWalletLockUseCase extends _i1.Mock
    implements _i12.ObserveWalletLockUseCase {
  @override
  _i3.Stream<bool> invoke() => (super.noSuchMethod(
        Invocation.method(
          #invoke,
          [],
        ),
        returnValue: _i3.Stream<bool>.empty(),
        returnValueForMissingStub: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);
}
