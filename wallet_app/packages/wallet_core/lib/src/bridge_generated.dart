// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.82.1.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class WalletCore {
  Future<void> init({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitConstMeta;

  Future<bool> isInitialized({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsInitializedConstMeta;

  Future<PinValidationResult> isValidPin({required String pin, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIsValidPinConstMeta;

  Stream<bool> setLockStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetLockStreamConstMeta;

  Future<void> clearLockStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearLockStreamConstMeta;

  Stream<FlutterConfiguration> setConfigurationStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetConfigurationStreamConstMeta;

  Future<void> clearConfigurationStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearConfigurationStreamConstMeta;

  Stream<List<Card>> setCardsStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSetCardsStreamConstMeta;

  Future<void> clearCardsStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kClearCardsStreamConstMeta;

  Future<WalletInstructionResult> unlockWallet({required String pin, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kUnlockWalletConstMeta;

  Future<void> lockWallet({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLockWalletConstMeta;

  Future<bool> hasRegistration({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kHasRegistrationConstMeta;

  Future<void> register({required String pin, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta;

  Future<IdentifyUriResult> identifyUri({required String uri, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kIdentifyUriConstMeta;

  Future<String> createPidIssuanceRedirectUri({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreatePidIssuanceRedirectUriConstMeta;

  Future<void> cancelPidIssuance({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCancelPidIssuanceConstMeta;

  Future<List<Card>> continuePidIssuance({required String uri, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kContinuePidIssuanceConstMeta;

  Future<WalletInstructionResult> acceptPidIssuance({required String pin, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAcceptPidIssuanceConstMeta;

  Future<void> rejectPidIssuance({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRejectPidIssuanceConstMeta;

  Future<StartDisclosureResult> startDisclosure({required String uri, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartDisclosureConstMeta;

  Future<void> cancelDisclosure({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCancelDisclosureConstMeta;

  Future<AcceptDisclosureResult> acceptDisclosure({required String pin, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAcceptDisclosureConstMeta;

  Future<List<WalletEvent>> getHistory({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetHistoryConstMeta;

  Future<List<WalletEvent>> getHistoryForCard({required String docType, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetHistoryForCardConstMeta;

  Future<void> resetWallet({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kResetWalletConstMeta;
}

@freezed
class AcceptDisclosureResult with _$AcceptDisclosureResult {
  const factory AcceptDisclosureResult.ok({
    String? returnUrl,
  }) = AcceptDisclosureResult_Ok;
  const factory AcceptDisclosureResult.instructionError({
    required WalletInstructionError error,
  }) = AcceptDisclosureResult_InstructionError;
}

class Card {
  final Organization issuer;
  final CardPersistence persistence;
  final String docType;
  final List<CardAttribute> attributes;

  const Card({
    required this.issuer,
    required this.persistence,
    required this.docType,
    required this.attributes,
  });
}

class CardAttribute {
  final String key;
  final List<LocalizedString> labels;
  final CardValue value;

  const CardAttribute({
    required this.key,
    required this.labels,
    required this.value,
  });
}

@freezed
class CardPersistence with _$CardPersistence {
  const factory CardPersistence.inMemory() = CardPersistence_InMemory;
  const factory CardPersistence.stored({
    required String id,
  }) = CardPersistence_Stored;
}

@freezed
class CardValue with _$CardValue {
  const factory CardValue.string({
    required String value,
  }) = CardValue_String;
  const factory CardValue.boolean({
    required bool value,
  }) = CardValue_Boolean;
  const factory CardValue.date({
    required String value,
  }) = CardValue_Date;
  const factory CardValue.gender({
    required GenderCardValue value,
  }) = CardValue_Gender;
}

class DisclosureCard {
  final Organization issuer;
  final String docType;
  final List<CardAttribute> attributes;

  const DisclosureCard({
    required this.issuer,
    required this.docType,
    required this.attributes,
  });
}

enum DisclosureStatus {
  Success,
  Cancelled,
  Error,
}

class FlutterConfiguration {
  final int inactiveLockTimeout;
  final int backgroundLockTimeout;

  const FlutterConfiguration({
    required this.inactiveLockTimeout,
    required this.backgroundLockTimeout,
  });
}

enum GenderCardValue {
  Unknown,
  Male,
  Female,
  NotApplicable,
}

enum IdentifyUriResult {
  PidIssuance,
  Disclosure,
}

@freezed
class Image with _$Image {
  const factory Image.svg({
    required String xml,
  }) = Image_Svg;
  const factory Image.png({
    required String base64,
  }) = Image_Png;
  const factory Image.jpg({
    required String base64,
  }) = Image_Jpg;
  const factory Image.asset({
    required String path,
  }) = Image_Asset;
}

class LocalizedString {
  final String language;
  final String value;

  const LocalizedString({
    required this.language,
    required this.value,
  });
}

class MissingAttribute {
  final List<LocalizedString> labels;

  const MissingAttribute({
    required this.labels,
  });
}

class Organization {
  final List<LocalizedString> legalName;
  final List<LocalizedString> displayName;
  final List<LocalizedString> description;
  final Image? image;
  final String? webUrl;
  final String? privacyPolicyUrl;
  final String? kvk;
  final List<LocalizedString>? city;
  final List<LocalizedString> category;
  final List<LocalizedString>? department;
  final String? countryCode;

  const Organization({
    required this.legalName,
    required this.displayName,
    required this.description,
    this.image,
    this.webUrl,
    this.privacyPolicyUrl,
    this.kvk,
    this.city,
    required this.category,
    this.department,
    this.countryCode,
  });
}

enum PinValidationResult {
  Ok,
  TooFewUniqueDigits,
  SequentialDigits,
  OtherIssue,
}

class RequestPolicy {
  final int? dataStorageDurationInMinutes;
  final bool dataSharedWithThirdParties;
  final bool dataDeletionPossible;
  final String policyUrl;

  const RequestPolicy({
    this.dataStorageDurationInMinutes,
    required this.dataSharedWithThirdParties,
    required this.dataDeletionPossible,
    required this.policyUrl,
  });
}

@freezed
class StartDisclosureResult with _$StartDisclosureResult {
  const factory StartDisclosureResult.request({
    required Organization relyingParty,
    required RequestPolicy policy,
    required List<DisclosureCard> requestedCards,
    required bool sharedDataWithRelyingPartyBefore,
    required List<LocalizedString> requestPurpose,
    required String requestOriginBaseUrl,
  }) = StartDisclosureResult_Request;
  const factory StartDisclosureResult.requestAttributesMissing({
    required Organization relyingParty,
    required List<MissingAttribute> missingAttributes,
    required bool sharedDataWithRelyingPartyBefore,
    required List<LocalizedString> requestPurpose,
    required String requestOriginBaseUrl,
  }) = StartDisclosureResult_RequestAttributesMissing;
}

@freezed
class WalletEvent with _$WalletEvent {
  const factory WalletEvent.disclosure({
    required String dateTime,
    required Organization relyingParty,
    required List<LocalizedString> purpose,
    List<DisclosureCard>? requestedCards,
    required RequestPolicy requestPolicy,
    required DisclosureStatus status,
  }) = WalletEvent_Disclosure;
  const factory WalletEvent.issuance({
    required String dateTime,
    required Card card,
  }) = WalletEvent_Issuance;
}

@freezed
class WalletInstructionError with _$WalletInstructionError {
  const factory WalletInstructionError.incorrectPin({
    required int leftoverAttempts,
    required bool isFinalAttempt,
  }) = WalletInstructionError_IncorrectPin;
  const factory WalletInstructionError.timeout({
    required int timeoutMillis,
  }) = WalletInstructionError_Timeout;
  const factory WalletInstructionError.blocked() = WalletInstructionError_Blocked;
}

@freezed
class WalletInstructionResult with _$WalletInstructionResult {
  const factory WalletInstructionResult.ok() = WalletInstructionResult_Ok;
  const factory WalletInstructionResult.instructionError({
    required WalletInstructionError error,
  }) = WalletInstructionResult_InstructionError;
}

class WalletCoreImpl implements WalletCore {
  final WalletCorePlatform _platform;
  factory WalletCoreImpl(ExternalLibrary dylib) => WalletCoreImpl.raw(WalletCorePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory WalletCoreImpl.wasm(FutureOr<WasmModule> module) => WalletCoreImpl(module as ExternalLibrary);
  WalletCoreImpl.raw(this._platform);
  Future<void> init({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kInitConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "init",
        argNames: [],
      );

  Future<bool> isInitialized({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_initialized(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kIsInitializedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsInitializedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_initialized",
        argNames: [],
      );

  Future<PinValidationResult> isValidPin({required String pin, dynamic hint}) {
    var arg0 = _platform.api2wire_String(pin);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_is_valid_pin(port_, arg0),
      parseSuccessData: _wire2api_pin_validation_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kIsValidPinConstMeta,
      argValues: [pin],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIsValidPinConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "is_valid_pin",
        argNames: ["pin"],
      );

  Stream<bool> setLockStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_lock_stream(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kSetLockStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetLockStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_lock_stream",
        argNames: [],
      );

  Future<void> clearLockStream({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clear_lock_stream(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kClearLockStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearLockStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_lock_stream",
        argNames: [],
      );

  Stream<FlutterConfiguration> setConfigurationStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_configuration_stream(port_),
      parseSuccessData: _wire2api_flutter_configuration,
      parseErrorData: null,
      constMeta: kSetConfigurationStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetConfigurationStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_configuration_stream",
        argNames: [],
      );

  Future<void> clearConfigurationStream({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clear_configuration_stream(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kClearConfigurationStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearConfigurationStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_configuration_stream",
        argNames: [],
      );

  Stream<List<Card>> setCardsStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_set_cards_stream(port_),
      parseSuccessData: _wire2api_list_card,
      parseErrorData: null,
      constMeta: kSetCardsStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSetCardsStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "set_cards_stream",
        argNames: [],
      );

  Future<void> clearCardsStream({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_clear_cards_stream(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kClearCardsStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kClearCardsStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "clear_cards_stream",
        argNames: [],
      );

  Future<WalletInstructionResult> unlockWallet({required String pin, dynamic hint}) {
    var arg0 = _platform.api2wire_String(pin);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_unlock_wallet(port_, arg0),
      parseSuccessData: _wire2api_wallet_instruction_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kUnlockWalletConstMeta,
      argValues: [pin],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kUnlockWalletConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "unlock_wallet",
        argNames: ["pin"],
      );

  Future<void> lockWallet({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lock_wallet(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kLockWalletConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLockWalletConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lock_wallet",
        argNames: [],
      );

  Future<bool> hasRegistration({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_has_registration(port_),
      parseSuccessData: _wire2api_bool,
      parseErrorData: null,
      constMeta: kHasRegistrationConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kHasRegistrationConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "has_registration",
        argNames: [],
      );

  Future<void> register({required String pin, dynamic hint}) {
    var arg0 = _platform.api2wire_String(pin);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_register(port_, arg0),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRegisterConstMeta,
      argValues: [pin],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "register",
        argNames: ["pin"],
      );

  Future<IdentifyUriResult> identifyUri({required String uri, dynamic hint}) {
    var arg0 = _platform.api2wire_String(uri);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_identify_uri(port_, arg0),
      parseSuccessData: _wire2api_identify_uri_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kIdentifyUriConstMeta,
      argValues: [uri],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kIdentifyUriConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "identify_uri",
        argNames: ["uri"],
      );

  Future<String> createPidIssuanceRedirectUri({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_create_pid_issuance_redirect_uri(port_),
      parseSuccessData: _wire2api_String,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCreatePidIssuanceRedirectUriConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCreatePidIssuanceRedirectUriConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "create_pid_issuance_redirect_uri",
        argNames: [],
      );

  Future<void> cancelPidIssuance({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cancel_pid_issuance(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCancelPidIssuanceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCancelPidIssuanceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "cancel_pid_issuance",
        argNames: [],
      );

  Future<List<Card>> continuePidIssuance({required String uri, dynamic hint}) {
    var arg0 = _platform.api2wire_String(uri);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_continue_pid_issuance(port_, arg0),
      parseSuccessData: _wire2api_list_card,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kContinuePidIssuanceConstMeta,
      argValues: [uri],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kContinuePidIssuanceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "continue_pid_issuance",
        argNames: ["uri"],
      );

  Future<WalletInstructionResult> acceptPidIssuance({required String pin, dynamic hint}) {
    var arg0 = _platform.api2wire_String(pin);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_accept_pid_issuance(port_, arg0),
      parseSuccessData: _wire2api_wallet_instruction_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAcceptPidIssuanceConstMeta,
      argValues: [pin],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAcceptPidIssuanceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "accept_pid_issuance",
        argNames: ["pin"],
      );

  Future<void> rejectPidIssuance({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_reject_pid_issuance(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kRejectPidIssuanceConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRejectPidIssuanceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "reject_pid_issuance",
        argNames: [],
      );

  Future<StartDisclosureResult> startDisclosure({required String uri, dynamic hint}) {
    var arg0 = _platform.api2wire_String(uri);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start_disclosure(port_, arg0),
      parseSuccessData: _wire2api_start_disclosure_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kStartDisclosureConstMeta,
      argValues: [uri],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartDisclosureConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "start_disclosure",
        argNames: ["uri"],
      );

  Future<void> cancelDisclosure({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_cancel_disclosure(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kCancelDisclosureConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCancelDisclosureConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "cancel_disclosure",
        argNames: [],
      );

  Future<AcceptDisclosureResult> acceptDisclosure({required String pin, dynamic hint}) {
    var arg0 = _platform.api2wire_String(pin);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_accept_disclosure(port_, arg0),
      parseSuccessData: _wire2api_accept_disclosure_result,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kAcceptDisclosureConstMeta,
      argValues: [pin],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kAcceptDisclosureConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "accept_disclosure",
        argNames: ["pin"],
      );

  Future<List<WalletEvent>> getHistory({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_history(port_),
      parseSuccessData: _wire2api_list_wallet_event,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetHistoryConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetHistoryConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_history",
        argNames: [],
      );

  Future<List<WalletEvent>> getHistoryForCard({required String docType, dynamic hint}) {
    var arg0 = _platform.api2wire_String(docType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_get_history_for_card(port_, arg0),
      parseSuccessData: _wire2api_list_wallet_event,
      parseErrorData: _wire2api_FrbAnyhowException,
      constMeta: kGetHistoryForCardConstMeta,
      argValues: [docType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kGetHistoryForCardConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "get_history_for_card",
        argNames: ["docType"],
      );

  Future<void> resetWallet({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_reset_wallet(port_),
      parseSuccessData: _wire2api_unit,
      parseErrorData: null,
      constMeta: kResetWalletConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kResetWalletConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "reset_wallet",
        argNames: [],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  FrbAnyhowException _wire2api_FrbAnyhowException(dynamic raw) {
    return FrbAnyhowException(raw as String);
  }

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  AcceptDisclosureResult _wire2api_accept_disclosure_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return AcceptDisclosureResult_Ok(
          returnUrl: _wire2api_opt_String(raw[1]),
        );
      case 1:
        return AcceptDisclosureResult_InstructionError(
          error: _wire2api_box_autoadd_wallet_instruction_error(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  Card _wire2api_box_autoadd_card(dynamic raw) {
    return _wire2api_card(raw);
  }

  Image _wire2api_box_autoadd_image(dynamic raw) {
    return _wire2api_image(raw);
  }

  Organization _wire2api_box_autoadd_organization(dynamic raw) {
    return _wire2api_organization(raw);
  }

  RequestPolicy _wire2api_box_autoadd_request_policy(dynamic raw) {
    return _wire2api_request_policy(raw);
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  WalletInstructionError _wire2api_box_autoadd_wallet_instruction_error(dynamic raw) {
    return _wire2api_wallet_instruction_error(raw);
  }

  Card _wire2api_card(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Card(
      issuer: _wire2api_organization(arr[0]),
      persistence: _wire2api_card_persistence(arr[1]),
      docType: _wire2api_String(arr[2]),
      attributes: _wire2api_list_card_attribute(arr[3]),
    );
  }

  CardAttribute _wire2api_card_attribute(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return CardAttribute(
      key: _wire2api_String(arr[0]),
      labels: _wire2api_list_localized_string(arr[1]),
      value: _wire2api_card_value(arr[2]),
    );
  }

  CardPersistence _wire2api_card_persistence(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CardPersistence_InMemory();
      case 1:
        return CardPersistence_Stored(
          id: _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  CardValue _wire2api_card_value(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return CardValue_String(
          value: _wire2api_String(raw[1]),
        );
      case 1:
        return CardValue_Boolean(
          value: _wire2api_bool(raw[1]),
        );
      case 2:
        return CardValue_Date(
          value: _wire2api_String(raw[1]),
        );
      case 3:
        return CardValue_Gender(
          value: _wire2api_gender_card_value(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  DisclosureCard _wire2api_disclosure_card(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return DisclosureCard(
      issuer: _wire2api_organization(arr[0]),
      docType: _wire2api_String(arr[1]),
      attributes: _wire2api_list_card_attribute(arr[2]),
    );
  }

  DisclosureStatus _wire2api_disclosure_status(dynamic raw) {
    return DisclosureStatus.values[raw as int];
  }

  FlutterConfiguration _wire2api_flutter_configuration(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FlutterConfiguration(
      inactiveLockTimeout: _wire2api_u16(arr[0]),
      backgroundLockTimeout: _wire2api_u16(arr[1]),
    );
  }

  GenderCardValue _wire2api_gender_card_value(dynamic raw) {
    return GenderCardValue.values[raw as int];
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  IdentifyUriResult _wire2api_identify_uri_result(dynamic raw) {
    return IdentifyUriResult.values[raw as int];
  }

  Image _wire2api_image(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return Image_Svg(
          xml: _wire2api_String(raw[1]),
        );
      case 1:
        return Image_Png(
          base64: _wire2api_String(raw[1]),
        );
      case 2:
        return Image_Jpg(
          base64: _wire2api_String(raw[1]),
        );
      case 3:
        return Image_Asset(
          path: _wire2api_String(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  List<Card> _wire2api_list_card(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_card).toList();
  }

  List<CardAttribute> _wire2api_list_card_attribute(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_card_attribute).toList();
  }

  List<DisclosureCard> _wire2api_list_disclosure_card(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_disclosure_card).toList();
  }

  List<LocalizedString> _wire2api_list_localized_string(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_localized_string).toList();
  }

  List<MissingAttribute> _wire2api_list_missing_attribute(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_missing_attribute).toList();
  }

  List<WalletEvent> _wire2api_list_wallet_event(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_wallet_event).toList();
  }

  LocalizedString _wire2api_localized_string(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LocalizedString(
      language: _wire2api_String(arr[0]),
      value: _wire2api_String(arr[1]),
    );
  }

  MissingAttribute _wire2api_missing_attribute(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MissingAttribute(
      labels: _wire2api_list_localized_string(arr[0]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  Image? _wire2api_opt_box_autoadd_image(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_image(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  List<DisclosureCard>? _wire2api_opt_list_disclosure_card(dynamic raw) {
    return raw == null ? null : _wire2api_list_disclosure_card(raw);
  }

  List<LocalizedString>? _wire2api_opt_list_localized_string(dynamic raw) {
    return raw == null ? null : _wire2api_list_localized_string(raw);
  }

  Organization _wire2api_organization(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11) throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return Organization(
      legalName: _wire2api_list_localized_string(arr[0]),
      displayName: _wire2api_list_localized_string(arr[1]),
      description: _wire2api_list_localized_string(arr[2]),
      image: _wire2api_opt_box_autoadd_image(arr[3]),
      webUrl: _wire2api_opt_String(arr[4]),
      privacyPolicyUrl: _wire2api_opt_String(arr[5]),
      kvk: _wire2api_opt_String(arr[6]),
      city: _wire2api_opt_list_localized_string(arr[7]),
      category: _wire2api_list_localized_string(arr[8]),
      department: _wire2api_opt_list_localized_string(arr[9]),
      countryCode: _wire2api_opt_String(arr[10]),
    );
  }

  PinValidationResult _wire2api_pin_validation_result(dynamic raw) {
    return PinValidationResult.values[raw as int];
  }

  RequestPolicy _wire2api_request_policy(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return RequestPolicy(
      dataStorageDurationInMinutes: _wire2api_opt_box_autoadd_u64(arr[0]),
      dataSharedWithThirdParties: _wire2api_bool(arr[1]),
      dataDeletionPossible: _wire2api_bool(arr[2]),
      policyUrl: _wire2api_String(arr[3]),
    );
  }

  StartDisclosureResult _wire2api_start_disclosure_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return StartDisclosureResult_Request(
          relyingParty: _wire2api_box_autoadd_organization(raw[1]),
          policy: _wire2api_box_autoadd_request_policy(raw[2]),
          requestedCards: _wire2api_list_disclosure_card(raw[3]),
          sharedDataWithRelyingPartyBefore: _wire2api_bool(raw[4]),
          requestPurpose: _wire2api_list_localized_string(raw[5]),
          requestOriginBaseUrl: _wire2api_String(raw[6]),
        );
      case 1:
        return StartDisclosureResult_RequestAttributesMissing(
          relyingParty: _wire2api_box_autoadd_organization(raw[1]),
          missingAttributes: _wire2api_list_missing_attribute(raw[2]),
          sharedDataWithRelyingPartyBefore: _wire2api_bool(raw[3]),
          requestPurpose: _wire2api_list_localized_string(raw[4]),
          requestOriginBaseUrl: _wire2api_String(raw[5]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  WalletEvent _wire2api_wallet_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return WalletEvent_Disclosure(
          dateTime: _wire2api_String(raw[1]),
          relyingParty: _wire2api_box_autoadd_organization(raw[2]),
          purpose: _wire2api_list_localized_string(raw[3]),
          requestedCards: _wire2api_opt_list_disclosure_card(raw[4]),
          requestPolicy: _wire2api_box_autoadd_request_policy(raw[5]),
          status: _wire2api_disclosure_status(raw[6]),
        );
      case 1:
        return WalletEvent_Issuance(
          dateTime: _wire2api_String(raw[1]),
          card: _wire2api_box_autoadd_card(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  WalletInstructionError _wire2api_wallet_instruction_error(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return WalletInstructionError_IncorrectPin(
          leftoverAttempts: _wire2api_u8(raw[1]),
          isFinalAttempt: _wire2api_bool(raw[2]),
        );
      case 1:
        return WalletInstructionError_Timeout(
          timeoutMillis: _wire2api_u64(raw[1]),
        );
      case 2:
        return WalletInstructionError_Blocked();
      default:
        throw Exception("unreachable");
    }
  }

  WalletInstructionResult _wire2api_wallet_instruction_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return WalletInstructionResult_Ok();
      case 1:
        return WalletInstructionResult_InstructionError(
          error: _wire2api_box_autoadd_wallet_instruction_error(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }
}

// Section: api2wire

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class WalletCorePlatform extends FlutterRustBridgeBase<WalletCoreWire> {
  WalletCorePlatform(ffi.DynamicLibrary dylib) : super(WalletCoreWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class WalletCoreWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  WalletCoreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  WalletCoreWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_init(
    int port_,
  ) {
    return _wire_init(
      port_,
    );
  }

  late final _wire_initPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_init');
  late final _wire_init = _wire_initPtr.asFunction<void Function(int)>();

  void wire_is_initialized(
    int port_,
  ) {
    return _wire_is_initialized(
      port_,
    );
  }

  late final _wire_is_initializedPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_is_initialized');
  late final _wire_is_initialized = _wire_is_initializedPtr.asFunction<void Function(int)>();

  void wire_is_valid_pin(
    int port_,
    ffi.Pointer<wire_uint_8_list> pin,
  ) {
    return _wire_is_valid_pin(
      port_,
      pin,
    );
  }

  late final _wire_is_valid_pinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_is_valid_pin');
  late final _wire_is_valid_pin = _wire_is_valid_pinPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_set_lock_stream(
    int port_,
  ) {
    return _wire_set_lock_stream(
      port_,
    );
  }

  late final _wire_set_lock_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_set_lock_stream');
  late final _wire_set_lock_stream = _wire_set_lock_streamPtr.asFunction<void Function(int)>();

  void wire_clear_lock_stream(
    int port_,
  ) {
    return _wire_clear_lock_stream(
      port_,
    );
  }

  late final _wire_clear_lock_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_clear_lock_stream');
  late final _wire_clear_lock_stream = _wire_clear_lock_streamPtr.asFunction<void Function(int)>();

  void wire_set_configuration_stream(
    int port_,
  ) {
    return _wire_set_configuration_stream(
      port_,
    );
  }

  late final _wire_set_configuration_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_set_configuration_stream');
  late final _wire_set_configuration_stream = _wire_set_configuration_streamPtr.asFunction<void Function(int)>();

  void wire_clear_configuration_stream(
    int port_,
  ) {
    return _wire_clear_configuration_stream(
      port_,
    );
  }

  late final _wire_clear_configuration_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_clear_configuration_stream');
  late final _wire_clear_configuration_stream = _wire_clear_configuration_streamPtr.asFunction<void Function(int)>();

  void wire_set_cards_stream(
    int port_,
  ) {
    return _wire_set_cards_stream(
      port_,
    );
  }

  late final _wire_set_cards_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_set_cards_stream');
  late final _wire_set_cards_stream = _wire_set_cards_streamPtr.asFunction<void Function(int)>();

  void wire_clear_cards_stream(
    int port_,
  ) {
    return _wire_clear_cards_stream(
      port_,
    );
  }

  late final _wire_clear_cards_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_clear_cards_stream');
  late final _wire_clear_cards_stream = _wire_clear_cards_streamPtr.asFunction<void Function(int)>();

  void wire_unlock_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> pin,
  ) {
    return _wire_unlock_wallet(
      port_,
      pin,
    );
  }

  late final _wire_unlock_walletPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_unlock_wallet');
  late final _wire_unlock_wallet =
      _wire_unlock_walletPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lock_wallet(
    int port_,
  ) {
    return _wire_lock_wallet(
      port_,
    );
  }

  late final _wire_lock_walletPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_lock_wallet');
  late final _wire_lock_wallet = _wire_lock_walletPtr.asFunction<void Function(int)>();

  void wire_has_registration(
    int port_,
  ) {
    return _wire_has_registration(
      port_,
    );
  }

  late final _wire_has_registrationPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_has_registration');
  late final _wire_has_registration = _wire_has_registrationPtr.asFunction<void Function(int)>();

  void wire_register(
    int port_,
    ffi.Pointer<wire_uint_8_list> pin,
  ) {
    return _wire_register(
      port_,
      pin,
    );
  }

  late final _wire_registerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_register');
  late final _wire_register = _wire_registerPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_identify_uri(
    int port_,
    ffi.Pointer<wire_uint_8_list> uri,
  ) {
    return _wire_identify_uri(
      port_,
      uri,
    );
  }

  late final _wire_identify_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_identify_uri');
  late final _wire_identify_uri = _wire_identify_uriPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_pid_issuance_redirect_uri(
    int port_,
  ) {
    return _wire_create_pid_issuance_redirect_uri(
      port_,
    );
  }

  late final _wire_create_pid_issuance_redirect_uriPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_create_pid_issuance_redirect_uri');
  late final _wire_create_pid_issuance_redirect_uri =
      _wire_create_pid_issuance_redirect_uriPtr.asFunction<void Function(int)>();

  void wire_cancel_pid_issuance(
    int port_,
  ) {
    return _wire_cancel_pid_issuance(
      port_,
    );
  }

  late final _wire_cancel_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_cancel_pid_issuance');
  late final _wire_cancel_pid_issuance = _wire_cancel_pid_issuancePtr.asFunction<void Function(int)>();

  void wire_continue_pid_issuance(
    int port_,
    ffi.Pointer<wire_uint_8_list> uri,
  ) {
    return _wire_continue_pid_issuance(
      port_,
      uri,
    );
  }

  late final _wire_continue_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_continue_pid_issuance');
  late final _wire_continue_pid_issuance =
      _wire_continue_pid_issuancePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_accept_pid_issuance(
    int port_,
    ffi.Pointer<wire_uint_8_list> pin,
  ) {
    return _wire_accept_pid_issuance(
      port_,
      pin,
    );
  }

  late final _wire_accept_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_accept_pid_issuance');
  late final _wire_accept_pid_issuance =
      _wire_accept_pid_issuancePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_reject_pid_issuance(
    int port_,
  ) {
    return _wire_reject_pid_issuance(
      port_,
    );
  }

  late final _wire_reject_pid_issuancePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_reject_pid_issuance');
  late final _wire_reject_pid_issuance = _wire_reject_pid_issuancePtr.asFunction<void Function(int)>();

  void wire_start_disclosure(
    int port_,
    ffi.Pointer<wire_uint_8_list> uri,
  ) {
    return _wire_start_disclosure(
      port_,
      uri,
    );
  }

  late final _wire_start_disclosurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_start_disclosure');
  late final _wire_start_disclosure =
      _wire_start_disclosurePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_cancel_disclosure(
    int port_,
  ) {
    return _wire_cancel_disclosure(
      port_,
    );
  }

  late final _wire_cancel_disclosurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_cancel_disclosure');
  late final _wire_cancel_disclosure = _wire_cancel_disclosurePtr.asFunction<void Function(int)>();

  void wire_accept_disclosure(
    int port_,
    ffi.Pointer<wire_uint_8_list> pin,
  ) {
    return _wire_accept_disclosure(
      port_,
      pin,
    );
  }

  late final _wire_accept_disclosurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_accept_disclosure');
  late final _wire_accept_disclosure =
      _wire_accept_disclosurePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_history(
    int port_,
  ) {
    return _wire_get_history(
      port_,
    );
  }

  late final _wire_get_historyPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_get_history');
  late final _wire_get_history = _wire_get_historyPtr.asFunction<void Function(int)>();

  void wire_get_history_for_card(
    int port_,
    ffi.Pointer<wire_uint_8_list> doc_type,
  ) {
    return _wire_get_history_for_card(
      port_,
      doc_type,
    );
  }

  late final _wire_get_history_for_cardPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_get_history_for_card');
  late final _wire_get_history_for_card =
      _wire_get_history_for_cardPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_reset_wallet(
    int port_,
  ) {
    return _wire_reset_wallet(
      port_,
    );
  }

  late final _wire_reset_walletPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_reset_wallet');
  late final _wire_reset_wallet = _wire_reset_walletPtr.asFunction<void Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

final class _Dart_Handle extends ffi.Opaque {}

final class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
