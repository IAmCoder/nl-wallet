variables:
  FLUTTER_APP_PROJECT_DIR: "wallet_app"
  RENEW_ON_LETSENCRYPT_STAGING:
    value: "false"
    description: "Try to renew the wallet_provider server certificate from the Let's encrypt staging environment."
  RENEW_ON_LETSENCRYPT_LIVE:
    value: "false"
    description: "Try to renew the wallet_provider server certificate from the Let's encrypt live environment."

.env:
  environment:
    name: ${K8S_CLUSTER}
    action: prepare

.env-k8s:
  extends: .env
  environment:
    kubernetes:
      namespace: ${K8S_NAMESPACE}

.deploy-k8s:
  extends: .env-k8s
  image: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-debian@sha256:0f89f392d517649775d0e55b4ad2e1c89248a28686e0e033eeb8f957a6a96b6a"
  resource_group: testcluster
  environment:
    action: start

.kaniko:
  extends: .env
  before_script:
    - echo $DOCKER_AUTH_CONFIG > /kaniko/.docker/config.json
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]

.default-sonar:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "$HARBOR_REGISTRY/docker-hub-proxy/sonarsource/sonar-scanner-cli:4.8.1"

.default-branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.default-or-release:
  rules:
    - !reference [ .default-branch, rules ]
    - if: $CI_COMMIT_BRANCH =~ /^(alpha|beta|release)\/\d+\.\d+\.\d+$/

.default-or-release-or-merge-request:
  rules:
    - !reference [ .default-or-release, rules ]
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Working directory is 'wallet_app' directory
test-flutter:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter@sha256:7d4314db8b5194c93b7afede39de72ecf04e4cd85a217f80f78faaac391325d9"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub get)
    - flutter analyze $FLUTTER_APP_PROJECT_DIR
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --exclude-tags=golden --coverage --branch-coverage --coverage-path coverage/lcov.info --file-reporter "json:build/reports/test-results.json")
  artifacts:
    paths:
      - $FLUTTER_APP_PROJECT_DIR/coverage/lcov.info
      - $FLUTTER_APP_PROJECT_DIR/build/reports/test-results.json

test-flutter-ui:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  when: manual
  tags:
    - macos
  artifacts:
    name: "ui-test-failures"
    when: on_failure
    paths:
      - "**/failures/*.png"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --tags=golden)

test-rust:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:c485e43a3940e33327f97ce24c1ab3c2e67fd5c86c7700df8dee14ad9c0d4a12"
  before_script:
    - softhsm2-util --init-token --slot 0 --so-pin "${HSM_SO_PIN}" --label test_token --pin "${WALLET_PROVIDER_HSM__USER_PIN}"
  script:
    - set -euxo pipefail
    # Check Rust formatting
    - find wallet_core -mindepth 2 -type f -name Cargo.toml -print0 | xargs -0 -n1 -I {} cargo fmt --manifest-path {} -- --check
    # Check clippy
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    - grep ^exclude wallet_core/Cargo.toml | grep -oP '".*?"' | tr -d '"' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    # Run tests, generate code coverage reports
    - (cd wallet_core; cargo llvm-cov test --locked --lcov --output-path lcov.info)
    - (cd wallet_core; cargo llvm-cov report --locked --cobertura --output-path unit-coverage.xml)
  artifacts:
    reports:
      coverage_report:
        path: wallet_core/unit-coverage.xml
        coverage_format: cobertura
    paths:
      - wallet_core/lcov.info

test-rust-integration:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:c485e43a3940e33327f97ce24c1ab3c2e67fd5c86c7700df8dee14ad9c0d4a12"
  variables:
    POSTGRES_USER: "postgres"
    POSTGRES_PASSWORD: "postgres"
    POSTGRES_DB: "wallet_provider"
    POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    WALLET_PROVIDER_DATABASE__HOST: "postgres"
  services:
    - name: "$HARBOR_REGISTRY/docker-hub-proxy/library/postgres@sha256:cb3de421ad5fdfd35c7d35652deeb406259e8955af19cca9554592618eb2112e" # 15.3
      alias: postgres
  before_script:
    - set -euxo pipefail
    - cd wallet_core
    - echo "${WALLET_PROVIDER_CERTIFICATE_SIGNING_KEY}" > certificate_signing_key.pem
    - echo "${WALLET_PROVIDER_INSTRUCTION_RESULT_SIGNING_KEY}" > instruction_result_signing_key.pem
    - echo "${WALLET_PROVIDER_ATTESTATION_WRAPPING_KEY}" | base64 --decode > attestation_wrapping_key.key
    - echo "${WALLET_PROVIDER_PIN_PUBKEY_ENCRYPTION_KEY}" | base64 --decode > pin_pubkey_encryption_key.key
    # see /script/setup-devenv.sh for details regarding the instructions below
    - softhsm2-util --init-token --slot 0 --so-pin "${HSM_SO_PIN}" --label test_token --pin "${WALLET_PROVIDER_HSM__USER_PIN}"
    - softhsm2-util --import certificate_signing_key.pem --pin "${WALLET_PROVIDER_HSM__USER_PIN}" --id "63657274696669636174655f7369676e696e670a" --label "certificate_signing_key" --token "test_token"
    - softhsm2-util --import instruction_result_signing_key.pem --pin "${WALLET_PROVIDER_HSM__USER_PIN}" --id "696e737472756374696f6e5f726573756c745f7369676e696e670a" --label "instruction_result_signing_key" --token "test_token"
    - softhsm2-util --import attestation_wrapping_key.key --aes --pin "${WALLET_PROVIDER_HSM__USER_PIN}" --id "6174746573746174696f6e5f7772617070696e670a" --label "attestation_wrapping_key" --token "test_token"
    - softhsm2-util --import pin_pubkey_encryption_key.key --aes --pin "${WALLET_PROVIDER_HSM__USER_PIN}" --id "70696e5f7075626b65795f656e6372797074696f6e0a" --label "pin_pubkey_encryption_key" --token "test_token"
    - p11tool --login --write --secret-key="$(openssl rand 32 | od -A n -v -t x1 | tr -d ' \n')" --set-pin "${WALLET_PROVIDER_HSM__USER_PIN}" --label="pin_public_disclosure_protection_key" "$(p11tool --list-token-urls | grep "SoftHSM")"
  script:
    - cargo run --bin wallet_provider_migrations -- up
    - cargo llvm-cov test --features db_test --test '*' --lcov --output-path lcov_integration.info
    - cargo llvm-cov report --locked --cobertura --output-path integration-coverage.xml
  artifacts:
    reports:
      coverage_report:
        path: wallet_core/integration-coverage.xml
        coverage_format: cobertura
    paths:
      - wallet_core/lcov_integration.info

test-rust-compilation-android-linux:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:52a23cbbd9ebbdf63ada458d23dcb0596dd1f7c47b6caa7ddd7b038c3d9784ff"
  variables:
    RUSTFLAGS: "-D warnings"
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_provider --bin wallet_provider
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package pid_issuer --bin pid_issuer
    - (cd wallet_core; cargo ndk --target arm64-v8a check --locked --release)

test-rust-compilation-ios:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  when: manual
  tags:
    - macos
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --target aarch64-apple-ios --release

test-ios:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  when: manual
  tags:
    - macos
  artifacts:
    name: "test_output"
    when: on_failure
    paths:
      - "**/fastlane/test_output/*"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane ios test

test-codegen:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter-rust@sha256:2fd7b0c206ec2a358b299ed0538d63f3751f249a103e356b481b40c8c7d1f532"
  script:
    - set -euxo pipefail
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub get)
    - cargo run --manifest-path wallet_core/flutter_rust_bridge_codegen/Cargo.toml --locked
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub run build_runner build --delete-conflicting-outputs)
    - dart format wallet_app --line-length 120
    - git diff
    - if [ $(git diff --shortstat | wc -l) -gt 0 ]; then echo "Code generation results in different files!"; exit 1; fi

dependency-check:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "$HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-app-builder-dependency-check@sha256:88a6ff08245ccee24e4625fc19533985ebc745223a600e193b5e9b0c946f2c8b"
  before_script:
    - mkdir -p $CI_PROJECT_DIR/dependency_check_data
  script:
    - dependency-check.sh
      --data $CI_PROJECT_DIR/dependency_check_data
      --enableExperimental
      --format "HTML" --format "JSON" --format "XML"
      --scan "."
      --suppression $CI_PROJECT_DIR/dependency_check_suppressions.xml
  artifacts:
    when: always
    paths:
      - dependency-check-report.json
      - dependency-check-report.html
      - dependency-check-report.xml
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - $CI_PROJECT_DIR/dependency_check_data

dependency-check-rust:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:c485e43a3940e33327f97ce24c1ab3c2e67fd5c86c7700df8dee14ad9c0d4a12"
  before_script:
    - mkdir $CI_PROJECT_DIR/dependency_check_data
  script:
    # todo: perhaps in the future we may want a warning or even failure in case of found vulnerabilities.
    - cargo audit --file wallet_core/Cargo.lock --json > audit.json || true
  artifacts:
    when: always
    paths:
      - audit.json

sonar-rust:
  extends: .default-sonar
  needs:
    - job: test-rust
      artifacts: true
    - job: test-rust-integration
      artifacts: true
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd wallet_core
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app-rust
      -Dsonar.exclusions="target/**,platform_support/android/**,platform_support/ios/**"
      -Dcommunity.rust.lcov.reportPaths="lcov.info,lcov_integration.info"

sonar-flutter:
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  needs:
    - job: test-flutter
      artifacts: true
    - job: dependency-check
      artifacts: true
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-sonar-flutter@sha256:02cbb1724745da7dc33f3f57e98d026f9b7fdf12b88c37ab1f0adc4f166e9169"
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd $FLUTTER_APP_PROJECT_DIR
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app
      -Dsonar.exclusions="android/**,ios/**"
      -Dsonar.dependencyCheck.htmlReportPath=../dependency-check-report.html
      -Dsonar.dependencyCheck.jsonReportPath=../dependency-check-report.json
      -Dsonar.flutter.tests.reportPath=build/reports/test-results.json
      -Dsonar.flutter.coverage.reportPath=coverage/lcov.info

sonar-ios:
  extends: .default-sonar
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd wallet_core/platform_support/ios
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app-platform-support-ios
      -Dsonar.exclusions="*Tests*/**"
      -Dsonar.c.file.suffixes=-
      -Dsonar.cpp.file.suffixes=-
      -Dsonar.objc.file.suffixes=-

sonar-android:
  extends: .default-sonar
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd wallet_core/platform_support/android
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app-platform-support-android
      -Dsonar.exclusions="platform_support/build/**,platform_support/src/androidTest/**"
      -Dsonar.findbugs.allowuncompiledcode=true

build-wp-image:
  extends: .kaniko
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-integration
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/wallet_provider/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-provider:$CI_COMMIT_SHORT_SHA
      --cache=true

build-wp-migrations-image:
  extends: .kaniko
  rules: !reference [ .default-branch, rules ]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-integration
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/wallet_provider/migrations/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-provider-migrations:$CI_COMMIT_SHORT_SHA
      --cache=true

build-pid-issuer-image:
  extends: .kaniko
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/pid_issuer/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-pid-issuer:$CI_COMMIT_SHORT_SHA
      --cache=true

build-mock-relying-party-image:
  extends: .kaniko
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/mock_relying_party/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-mock-relying-party:$CI_COMMIT_SHORT_SHA
      --cache=true

build-wallet-server-image:
  extends: .kaniko
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/wallet_server/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-server:$CI_COMMIT_SHORT_SHA
      --cache=true

build-static-files-image:
  extends: .kaniko
  rules: !reference [ .default-or-release, rules ]
  script:
    - /kaniko/executor
      --context kubernetes/static-files
      --dockerfile kubernetes/static-files/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-static-files-hosting:$CI_COMMIT_SHORT_SHA
      --cache=true

build-android-app:
  extends: .env-k8s
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: test-flutter
      artifacts: false
    - job: test-codegen
      artifacts: false
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:52a23cbbd9ebbdf63ada458d23dcb0596dd1f7c47b6caa7ddd7b038c3d9784ff"
  artifacts:
    name: "wallet-android"
    paths:
      - "*.aab"
      - "*.apk"
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane android ci_build

build-ios-app:
  extends: .env-k8s
  rules: !reference [ .default-or-release, rules ]
  when: manual
  needs:
    - job: test-flutter
      artifacts: false
    - job: test-codegen
      artifacts: false
    - job: test-rust
      artifacts: false
    - job: test-ios
      artifacts: false
    - job: test-rust-compilation-ios
      artifacts: false
  tags:
    - macos
  artifacts:
    name: "wallet-ios"
    paths:
      - "*.ipa"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane ios ci_build

deploy-android-app:
  extends: .env-k8s
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: build-android-app
      artifacts: true
  # needs:
  #   - job: build-ios-app # only deploy apps when both apps have been built successfully
  #     artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane android ci_deploy

dependency-check-images:
  extends: .env-k8s
  rules: !reference [ .default-branch, rules ]
  needs:
    - job: build-wp-image
      artifacts: false
    - job: build-wp-migrations-image
      artifacts: false
    - job: build-pid-issuer-image
      artifacts: false
    - job: build-mock-relying-party-image
      artifacts: false
    - job: build-wallet-server-image
      artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-sonar-flutter@sha256:02cbb1724745da7dc33f3f57e98d026f9b7fdf12b88c37ab1f0adc4f166e9169"
  variables:
    GIT_STRATEGY: none
  before_script:
    - IMAGES=(
      "nl-wallet-app-builder-android-flutter-rust"
      "nl-wallet-app-builder-flutter"
      "nl-wallet-app-builder-flutter-rust"
      "nl-wallet-app-builder-ruby"
      "nl-wallet-app-builder-rust"
      "nl-wallet-mock-relying-party"
      "nl-wallet-provider-migrations"
      "nl-wallet-provider"
      "nl-wallet-pid-issuer"
      "nl-wallet-server"
      )
    - mkdir -p trivy
  script:
    - |
      BASIC_AUTH="${HARBOR_GN2_ROBOT_NAME}:$(base64 --decode <<< ${HARBOR_GN2_ROBOT_SECRET})"
      for IMAGE in "${IMAGES[@]}"; do
        ARTIFACTS_URL="https://${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_NLW_PROJECT}/repositories/${IMAGE}/artifacts?page_size=1&page=1&sort=-push_time"
        VULNERABILITIES_HREF=$(curl --user "${BASIC_AUTH}" --url "${ARTIFACTS_URL}" | jq ".[] | .addition_links.vulnerabilities.href" | sed -e 's/^"//' -e 's/"$//')
        VULNERABILITIES_URL="https://${HARBOR_REGISTRY}${VULNERABILITIES_HREF}"
        curl --user "${BASIC_AUTH}" -o "trivy/${IMAGE}.json" $VULNERABILITIES_URL
      done
  artifacts:
    paths:
      - trivy

upload-browserstack-android-app:
  extends: .env-k8s
  rules: !reference [ .default-branch, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  needs:
    - job: build-android-app
      artifacts: true
  # needs:
  #   - job: build-ios-app # only deploy apps when both apps have been built successfully
  #     artifacts: false
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane android ci_browserstack

deploy-ios-app:
  extends: .env-k8s
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: build-ios-app
      artifacts: true
    - job: build-android-app # only deploy apps when both apps have been built successfully
      artifacts: false
  tags:
    - macos
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane ios ci_deploy

upload-browserstack-ios-app:
  extends: .env-k8s
  rules: !reference [ .default-branch, rules ]
  needs:
    - job: build-ios-app
      artifacts: true
    - job: build-android-app # only deploy apps when both apps have been built successfully
      artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane ios ci_browserstack

run-wallet-provider-migrations:
  extends: .deploy-k8s
  rules: !reference [ .default-branch, rules ]
  when: manual
  needs:
    - job: build-wp-migrations-image
      artifacts: false
  variables:
    WALLET_PROVIDER_MIGRATIONS_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-provider-migrations:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/wallet-provider-migration-job.yaml | kubectl apply -f -
    - kubectl wait --for=condition=complete --timeout=300s job -l app=wallet-provider-migrations

deploy-wallet-provider:
  extends: .deploy-k8s
  rules: !reference [ .default-branch, rules ]
  needs:
    - job: build-wp-image
      artifacts: false
    - job: run-wallet-provider-migrations
      artifacts: false
  variables:
    WALLET_PROVIDER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-provider:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/servicemonitors.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/wallet-provider-configmap.yaml
    - envsubst < kubernetes/wallet-provider-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/wallet-provider-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/wallet-provider-service.yaml
    - kubectl apply -f kubernetes/wallet-provider-network-policies.yaml
    - kubectl rollout status deployment/wallet-provider

deploy-wallet-provider-staging-cert:
  extends: .deploy-k8s
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "schedule") && $RENEW_ON_LETSENCRYPT_STAGING == "true"
  script:
    - envsubst < kubernetes/certificates/stage/cert.yaml | kubectl apply -f -
    - kubectl wait --for condition="ready" --timeout=180s -f kubernetes/certificates/stage/cert.yaml

deploy-wallet-provider-live-cert:
  extends: .deploy-k8s
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $RENEW_ON_LETSENCRYPT_LIVE == "true"
  script:
    - envsubst < kubernetes/certificates/live/cert.yaml | kubectl apply -f -
    - kubectl wait --for condition="ready" --timeout=180s -f kubernetes/certificates/live/cert.yaml

deploy-pid-issuer:
  extends: .deploy-k8s
  rules: !reference [ .default-branch, rules ]
  when: manual
  needs:
    - job: build-pid-issuer-image
      artifacts: false
  variables:
    PID_ISSUER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-pid-issuer:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/pid-issuer-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/pid-issuer-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/pid-issuer-service.yaml
    - kubectl rollout status deployment/pid-issuer

deploy-mock-relying-party:
  extends: .deploy-k8s
  rules: !reference [ .default-branch, rules ]
  when: manual
  needs:
    - job: build-mock-relying-party-image
      artifacts: false
    - job: build-wallet-server-image
      artifacts: false
  variables:
    MOCK_RELYING_PARTY_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-mock-relying-party:${CI_COMMIT_SHORT_SHA}
    MRP_WALLET_SERVER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-server:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/mrp-wallet-server-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/mrp-wallet-server-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/mrp-wallet-server-service.yaml
    - kubectl rollout status deployment/mrp-wallet-server
    - envsubst < kubernetes/mock-relying-party-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/mock-relying-party-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/mock-relying-party-service.yaml
    - kubectl rollout status deployment/mock-relying-party

deploy-static-files-hosting:
  extends: .deploy-k8s
  rules: !reference [ .default-branch, rules ]
  when: manual
  needs:
    - job: build-static-files-image
      artifacts: false
  variables:
    STATIC_FILES_HOSTING_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-static-files-hosting:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/static-files-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/static-files-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/static-files-service.yaml
    - kubectl rollout status deployment/static-files

run-automation-tests:
  extends: .env-k8s
  rules:
    - if: $RUN_AUTOMATION_TESTS == "true" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-jdk11@sha256:1b0d6c2f6fe1e66d5f72e3d76648c973c9d0c0fa1bf57c3d94da30f6e8c97414"
  artifacts:
    when: always
    paths:
      - uiautomation/build/test-results
      - uiautomation/build/reports
  script:
    - export BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - set -euxo pipefail
    - java -version
    - cd uiautomation
    - gradle wrapper --gradle-version=7.3.3
    - ./gradlew --debug --stacktrace test --tests suite.FeatureTestSuite
