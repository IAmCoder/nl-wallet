variables:
  CACHE_COMPRESSION_LEVEL: "fastest"
  FF_USE_FASTZIP: "true"
  FLUTTER_APP_PROJECT_DIR: "wallet_app"
  CARGO_HOME: "${CI_PROJECT_DIR}/.cargo"
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: "line-tables-only"
  APP_BUILD_OFFSET: 861

.env-ont:
  environment:
    name: ${K8S_CLUSTER}
    deployment_tier: development
    action: access

.env-demo:
  environment:
    name: ${K8S_DEMO_CLUSTER}
    deployment_tier: staging
    action: access

.env-ont-k8s:
  extends: .env-ont
  environment:
    action: start
    kubernetes:
      namespace: ${K8S_NAMESPACE}

.env-demo-k8s:
  extends: .env-demo
  environment:
    kubernetes:
      namespace: ${K8S_DEMO_NAMESPACE}

default:
  image: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-debian@sha256:529d9b3c3ea0b58a71e522837230b6ed473f24b8ec91ea8bc311ea6fa3e7d806"

.kaniko:
  extends: .env-ont
  before_script:
    - echo $DOCKER_AUTH_CONFIG > /kaniko/.docker/config.json
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]

.default-sonar:
  rules: !reference [.default-or-merge-request, rules]
  image:
    name: "$HARBOR_REGISTRY/docker-hub-proxy/sonarsource/sonar-scanner-cli:4.8.1"

.default-branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        CACHE_POLICY: pull-push

.release-tag:
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/
      variables:
        CACHE_POLICY: pull

.merge-request:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        CACHE_POLICY: pull

.default-or-release:
  rules:
    - !reference [.default-branch, rules]
    - !reference [.release-tag, rules]

.default-or-merge-request:
  rules:
    - !reference [.default-branch, rules]
    - !reference [.merge-request, rules]

.default-or-release-or-merge-request:
  rules:
    - !reference [.default-or-release, rules]
    - !reference [.merge-request, rules]

.rust-cache:
  cache:
    key: rust-${CI_JOB_NAME_SLUG}-${CI_DEFAULT_BRANCH}
    paths:
      - ".cargo/git"
      - ".cargo/registry/index"
      - ".cargo/registry/cache"
      - "wallet_core/target/"
      - "wallet_core/flutter_rust_bridge_codegen/target"
      - "wallet_core/uniffi-bindgen/target"
    policy: ${CACHE_POLICY}

.ruby-cache:
  cache:
    key: ruby-${CI_COMMIT_REF_SLUG}
    paths:
      - "vendor/ruby"
  before_script:
    - ruby -v
    - bundle config set --local path "vendor/ruby"

test-flutter:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter@sha256:7d4314db8b5194c93b7afede39de72ecf04e4cd85a217f80f78faaac391325d9"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub get)
    - flutter analyze $FLUTTER_APP_PROJECT_DIR
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --exclude-tags=golden --coverage --branch-coverage --coverage-path coverage/lcov.info --file-reporter "json:build/reports/test-results.json")
  artifacts:
    paths:
      - $FLUTTER_APP_PROJECT_DIR/coverage/lcov.info
      - $FLUTTER_APP_PROJECT_DIR/build/reports/test-results.json

test-flutter-ui:
  rules: !reference [.default-or-release-or-merge-request, rules]
  when: manual
  tags:
    - macos
  artifacts:
    name: "ui-test-failures"
    when: on_failure
    paths:
      - "**/failures/*.png"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --tags=golden)

lint-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:e8004706e1171f995fdfe38ed7c671b076eb4559e0cef3c1bc72690d19ab78b8"
  cache: !reference [.rust-cache, cache]
  script:
    - set -euxo pipefail
    # Check Rust formatting
    - find wallet_core -mindepth 2 -type f -name Cargo.toml -print0 | xargs -0 -n1 -I {} cargo fmt --manifest-path {} -- --check
    # Check clippy
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    - grep ^exclude wallet_core/Cargo.toml | grep -oP '".*?"' | tr -d '"' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings

test-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:e8004706e1171f995fdfe38ed7c671b076eb4559e0cef3c1bc72690d19ab78b8"
  cache: !reference [.rust-cache, cache]
  script:
    # Run tests, generate code coverage reports
    - (cd wallet_core; cargo llvm-cov test --locked --lcov --output-path lcov.info)
    - (cd wallet_core; cargo llvm-cov report --locked --cobertura --output-path unit-coverage.xml)
  artifacts:
    reports:
      coverage_report:
        path: wallet_core/unit-coverage.xml
        coverage_format: cobertura
    paths:
      - wallet_core/lcov.info

test-rust-integration:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:e8004706e1171f995fdfe38ed7c671b076eb4559e0cef3c1bc72690d19ab78b8"
  cache: !reference [.rust-cache, cache]
  variables:
    SKIP_DIGID_CONNECTOR: "true"
    WALLET_PROVIDER_DATABASE__HOST: "postgres"
    WALLET_SERVER_STORE_URL: "postgres://postgres:postgres@postgres:5432/wallet_server"
  services:
    - name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-postgres@sha256:8260dcdfd90b550c80d8a2e5527c0efb2280b371ab34c28f713f770a749c49dc"
      alias: postgres
      variables:
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "postgres"
        POSTGRES_INITDB_ARGS: "--encoding=UTF8"
        POSTGRES_MULTIPLE_DATABASES: "wallet_provider,wallet_server"
  before_script:
    - set -euxo pipefail
    - ./scripts/setup-devenv.sh
    - cd wallet_core
  script:
    - cargo run --bin wallet_provider_migrations --locked -- up
    - DATABASE_URL="${WALLET_SERVER_STORE_URL}" cargo run --bin wallet_server_migration --locked -- up
    - cargo llvm-cov test --features db_test,hsm_test --test '*' --locked --lcov --output-path lcov_integration.info
    - cargo llvm-cov report --locked --cobertura --output-path integration-coverage.xml
  artifacts:
    reports:
      coverage_report:
        path: wallet_core/integration-coverage.xml
        coverage_format: cobertura
    paths:
      - wallet_core/lcov_integration.info

test-rust-compilation-android-linux:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:a79e22d5328c157ed85d2701f4f53d1c9f8d7efe8b0b38a5e4b6ed534110dbd6"
  variables:
    RUSTFLAGS: "-D warnings"
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_provider --bin wallet_provider
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_provider_migrations --bin wallet_provider_migrations
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package configuration_server --bin configuration_server
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package pid_issuer --bin pid_issuer
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_server --bin wallet_server
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_server_migration --bin wallet_server_migration
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package mock_relying_party --bin mock_relying_party
    - (cd wallet_core; cargo ndk --target arm64-v8a check --package flutter_api --locked --release)

test-rust-compilation-ios:
  rules: !reference [.default-or-release-or-merge-request, rules]
  when: manual
  tags:
    - macos
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --target aarch64-apple-ios --release

test-ios:
  extends: .ruby-cache
  rules: !reference [.default-or-release-or-merge-request, rules]
  when: manual
  tags:
    - macos
  artifacts:
    name: "test_output"
    when: on_failure
    paths:
      - "**/fastlane/test_output/*"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane ios test

test-codegen:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter-rust@sha256:ac003e628b6967357fbd447e230cb5d0b5d40af769213908be57a97545b1e839"
  cache: !reference [.rust-cache, cache]
  script:
    - set -euxo pipefail
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub get)
    - cargo run --manifest-path wallet_core/flutter_rust_bridge_codegen/Cargo.toml --locked
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub run build_runner build --delete-conflicting-outputs)
    - dart format wallet_app --line-length 120
    - git diff
    - if [ $(git diff --shortstat | wc -l) -gt 0 ]; then echo "Code generation results in different files!"; exit 1; fi

dependency-check:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "$HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-app-builder-dependency-check@sha256:88a6ff08245ccee24e4625fc19533985ebc745223a600e193b5e9b0c946f2c8b"
  before_script:
    - mkdir -p $CI_PROJECT_DIR/dependency_check_data
  script:
    - dependency-check.sh
      --data $CI_PROJECT_DIR/dependency_check_data
      --disableDart
      --enableExperimental
      --format "HTML" --format "JSON" --format "XML"
      --scan "."
      --suppression $CI_PROJECT_DIR/dependency_check_suppressions.xml
  artifacts:
    when: always
    paths:
      - dependency-check-report.json
      - dependency-check-report.html
      - dependency-check-report.xml
  cache:
    key: dependency-check-${CI_JOB_NAME_SLUG}-${CI_DEFAULT_BRANCH}
    paths:
      - $CI_PROJECT_DIR/dependency_check_data
    policy: $CACHE_POLICY

osv-scanner:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "$HARBOR_REGISTRY/ghcr-io-proxy/google/osv-scanner:latest"
  script:
    - /osv-scanner --format sarif --recursive "$CI_PROJECT_DIR" > osv.sarif || true
  artifacts:
    paths:
      - osv.sarif

dependency-check-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:e8004706e1171f995fdfe38ed7c671b076eb4559e0cef3c1bc72690d19ab78b8"
  before_script:
    - mkdir $CI_PROJECT_DIR/dependency_check_data
  script:
    # Note: RUSTSEC-2023-0071 is currently unfixable, a false positive and irrelevant for us, therefore we ignore it
    # Note: RUSTSEC-2024-0019 is Windows-specific and can be safely ignored
    - |
      cargo audit \
        --ignore RUSTSEC-2023-0071 \
        --ignore RUSTSEC-2024-0019 \
        --file wallet_core/Cargo.lock \
        --json | tee audit.json | jq
  artifacts:
    when: always
    paths:
      - audit.json
  allow_failure: true

sonar-rust:
  extends: .default-sonar
  needs:
    - job: test-rust
      artifacts: true
    - job: test-rust-integration
      artifacts: true
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd wallet_core
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app-rust
      -Dsonar.exclusions="target/**,platform_support/android/**,platform_support/ios/**"
      -Dcommunity.rust.lcov.reportPaths="lcov.info,lcov_integration.info"

sonar-flutter:
  rules: !reference [.default-or-merge-request, rules]
  needs:
    - job: test-flutter
      artifacts: true
    - job: dependency-check
      artifacts: true
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-sonar-flutter@sha256:02cbb1724745da7dc33f3f57e98d026f9b7fdf12b88c37ab1f0adc4f166e9169"
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd $FLUTTER_APP_PROJECT_DIR
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app
      -Dsonar.exclusions="android/**,ios/**"
      -Dsonar.dependencyCheck.htmlReportPath=../dependency-check-report.html
      -Dsonar.dependencyCheck.jsonReportPath=../dependency-check-report.json
      -Dsonar.flutter.tests.reportPath=build/reports/test-results.json
      -Dsonar.flutter.coverage.reportPath=coverage/lcov.info

sonar-ios:
  extends: .default-sonar
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd wallet_core/platform_support/ios
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app-platform-support-ios
      -Dsonar.exclusions="*Tests*/**"
      -Dsonar.c.file.suffixes=-
      -Dsonar.cpp.file.suffixes=-
      -Dsonar.objc.file.suffixes=-

sonar-android:
  extends: .default-sonar
  variables:
    GIT_STRATEGY: clone
  before_script:
    - cd wallet_core/platform_support/android
  script:
    - sonar-scanner
      -Dsonar.sourceEncoding=UTF-8
      -Dsonar.projectKey=nl-wallet-demo-app-platform-support-android
      -Dsonar.exclusions="platform_support/build/**,platform_support/src/androidTest/**"
      -Dsonar.findbugs.allowuncompiledcode=true

build-wp-image:
  extends: .kaniko
  rules: !reference [.default-or-release, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-integration
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/wallet_provider/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-provider:$CI_COMMIT_SHORT_SHA
      --cache=true

build-wp-migrations-image:
  extends: .kaniko
  rules: !reference [.default-or-release, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-integration
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/wallet_provider/migrations/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-provider-migrations:$CI_COMMIT_SHORT_SHA
      --cache=true

build-pid-issuer-image:
  extends: .kaniko
  rules: !reference [.default-or-release, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/pid_issuer/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-pid-issuer:$CI_COMMIT_SHORT_SHA
      --cache=true

build-mock-relying-party-image:
  extends: .kaniko
  rules: !reference [.default-or-release, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/mock_relying_party/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-mock-relying-party:$CI_COMMIT_SHORT_SHA
      --cache=true

build-wallet-server-image:
  extends: .kaniko
  rules: !reference [.default-or-release, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/wallet_server/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-server:$CI_COMMIT_SHORT_SHA
      --cache=true

build-ws-migrations-image:
  extends: .kaniko
  rules: !reference [.default-or-release, rules]
  needs:
    - job: test-rust
      artifacts: false
    - job: test-rust-integration
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  script:
    - /kaniko/executor
      --context wallet_core
      --dockerfile wallet_core/wallet_server/migration/Dockerfile
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-server-migrations:$CI_COMMIT_SHORT_SHA
      --cache=true

.build-android-app:
  extends: .ruby-cache
  needs:
    - job: test-flutter
      artifacts: false
    - job: test-codegen
      artifacts: false
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:a79e22d5328c157ed85d2701f4f53d1c9f8d7efe8b0b38a5e4b6ed534110dbd6"
  cache: !reference [.rust-cache, cache]
  artifacts:
    name: "wallet-android"
    paths:
      - "*.aab"
      - "*.apk"
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
    UNIVERSAL_LINK_BASE: "https://${UL_HOSTNAME}/deeplink/"
  script:
    - kubectl get secret nl-wallet-play-store-upload-key -o jsonpath='{.data.keystore}' | base64 --decode > wallet_app/android/upload-keystore.jks
    - kubectl get secret nl-wallet-play-store-upload-key -o jsonpath='{.data.key-properties}' | base64 --decode > wallet_app/android/key.properties
    - kubectl get secret nl-wallet-core-env-file -o jsonpath='{.data.env}' | base64 --decode > wallet_core/wallet/.env
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - |
      bundle exec fastlane android build \
        package_name:"${INTERNAL_APP_IDENTIFIER}.${APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        app_name:"${APP_NAME}" \
        file_format:"${APP_FILE_FORMAT}" \
        build_mode:"${APP_BUILD_MODE}" \
        mock:"${APP_MOCK}" \
        universal_link_base:"${UL_HOSTNAME}" \
        build:"$((CI_PIPELINE_IID + APP_BUILD_OFFSET))" \
        version:"$(echo $CI_COMMIT_REF_NAME | grep -E '^v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$' | sed 's/^v//')"
  after_script:
    - rm wallet_app/android/upload-keystore.jks wallet_app/android/key.properties

.build-android-app-latest:
  extends: [.env-ont-k8s, .build-android-app]
  rules: !reference [.default-branch, rules]
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"
    APP_NAME: "NL Wallet (latest)"
    APP_MOCK: "false"
    UL_HOSTNAME: "${EXTERNAL_HOSTNAME_ONT}"

build-android-app-latest-release:
  extends: .build-android-app-latest
  variables:
    APP_FILE_FORMAT: "aab"
    APP_BUILD_MODE: "release"

build-android-app-latest-profile:
  extends: .build-android-app-latest
  variables:
    APP_FILE_FORMAT: "apk"
    APP_BUILD_MODE: "profile"

.build-android-app-mock:
  extends: [.env-ont-k8s, .build-android-app]
  rules: !reference [.release-tag, rules]
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"
    APP_NAME: "NL Wallet (mock)"
    APP_MOCK: "true"

build-android-app-mock-release:
  extends: .build-android-app-mock
  variables:
    APP_FILE_FORMAT: "aab"
    APP_BUILD_MODE: "release"

.build-android-app-demo:
  extends: [.env-demo-k8s, .build-android-app]
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"
    APP_NAME: "NL Wallet (demo)"
    APP_MOCK: "false"
    UL_HOSTNAME: "${EXTERNAL_HOSTNAME_DEMO}"

build-android-app-demo-release:
  rules: !reference [.release-tag, rules]
  extends: .build-android-app-demo
  variables:
    APP_FILE_FORMAT: "aab"
    APP_BUILD_MODE: "release"

build-android-app-demo-profile:
  rules: !reference [.release-tag, rules]
  extends: .build-android-app-demo
  variables:
    APP_FILE_FORMAT: "apk"
    APP_BUILD_MODE: "profile"

.build-ios-app:
  rules: !reference [.default-or-release, rules]
  when: manual
  needs:
    - job: test-flutter
      artifacts: false
    - job: test-codegen
      artifacts: false
    - job: test-rust
      artifacts: false
    - job: test-ios
      artifacts: false
    - job: test-rust-compilation-ios
      artifacts: false
  tags:
    - macos
  artifacts:
    name: "wallet-ios"
    paths:
      - "*.ipa"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
    UNIVERSAL_LINK_BASE: "https://${UL_HOSTNAME}/deeplink/"
  script:
    - export MATCH_PASSWORD=$(kubectl get secret nl-wallet-fastlane-match -o jsonpath='{.data.password}' | base64 --decode)
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - |
      bundle exec fastlane ios build \
        bundle_id:"${INTERNAL_APP_IDENTIFIER}.${APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        app_name:"${APP_NAME}" \
        build:"$((CI_PIPELINE_IID + APP_BUILD_OFFSET))" \
        version:"$(echo $CI_COMMIT_REF_NAME | grep -E '^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$')"

build-ios-app-latest:
  extends: [.env-ont-k8s, .build-ios-app] # needs k8s secrets
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"
    APP_NAME: "NL Wallet (latest)"
    APP_MOCK: "false"

.deploy-android-app:
  extends: .ruby-cache
  # needs:
  #   - job: build-ios-app # only deploy apps when both apps have been built successfully
  #     artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - export JSON_KEY_DATA=$(kubectl get secret nl-wallet-play-store-api-key -o jsonpath='{.data.json}' | base64 --decode)
    - |
      bundle exec fastlane android ci_deploy \
        package_name:"${INTERNAL_APP_IDENTIFIER}.${APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        version:"$(echo $CI_COMMIT_REF_NAME | grep -E '^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$')"

deploy-android-app-latest:
  extends: [.env-ont-k8s, .deploy-android-app]
  rules: !reference [.default-branch, rules]
  needs:
    - job: build-android-app-latest-release
      artifacts: true
  environment:
    action: start
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"

deploy-android-app-mock:
  extends: [.env-ont-k8s, .deploy-android-app]
  when: manual
  rules: !reference [.release-tag, rules]
  needs:
    - job: build-android-app-mock-release
      artifacts: true
  environment:
    action: start
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"

deploy-android-app-demo:
  extends: [.env-demo-k8s, .deploy-android-app]
  rules: !reference [.release-tag, rules]
  needs:
    - job: build-android-app-demo-release
      artifacts: true
  environment:
    action: start
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"

.upload-browserstack-android-app:
  extends: .ruby-cache
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  # needs:
  #   - job: build-ios-app # only deploy apps when both apps have been built successfully
  #     artifacts: false
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - export BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - bundle install
    - |
      bundle exec fastlane android ci_browserstack \
        package_name:"${INTERNAL_APP_IDENTIFIER}.${APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        version:"$(echo $CI_COMMIT_REF_NAME | grep -E '^[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$')"

upload-browserstack-android-app-latest:
  extends: [.env-ont-k8s, .upload-browserstack-android-app]
  rules: !reference [.default-branch, rules]
  needs:
    - job: build-android-app-latest-profile
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"

upload-browserstack-android-app-demo:
  extends: [.env-demo-k8s, .upload-browserstack-android-app]
  rules: !reference [.release-tag, rules]
  needs:
    - job: build-android-app-demo-profile
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"

#deploy-ios-app:
#  resource_group: deploy-ios
#  rules: !reference [.default-or-release, rules]
#  needs:
#    - job: build-ios-app
#      artifacts: true
#    - job: build-android-app # only deploy apps when both apps have been built successfully
#      artifacts: false
#  environment:
#    name: deploy-ios
#    action: start
#  tags:
#    - macos
#  variables:
#    FASTLANE_OPT_OUT_USAGE: "YES"
#  script:
#    - bundle install
#    - bundle exec fastlane disable_flutter_analytics
#    - bundle exec fastlane ios ci_deploy
#
#upload-browserstack-ios-app:
#  resource_group: deploy-ios
#  rules: !reference [.default-branch, rules]
#  needs:
#    - job: build-ios-app
#      artifacts: true
#    - job: build-android-app # only deploy apps when both apps have been built successfully
#      artifacts: false
#  image:
#    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
#  variables:
#    LC_ALL: "C.UTF-8"
#    LANG: "C.UTF-8"
#    FASTLANE_OPT_OUT_USAGE: "YES"
#  script:
#    - bundle install
#    - bundle exec fastlane ios ci_browserstack

dependency-check-images:
  rules: !reference [.default-or-release, rules]
  needs:
    - job: build-wp-image
      artifacts: false
    - job: build-wp-migrations-image
      artifacts: false
    - job: build-ws-migrations-image
      artifacts: false
    - job: build-pid-issuer-image
      artifacts: false
    - job: build-mock-relying-party-image
      artifacts: false
    - job: build-wallet-server-image
      artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-sonar-flutter@sha256:02cbb1724745da7dc33f3f57e98d026f9b7fdf12b88c37ab1f0adc4f166e9169"
  variables:
    GIT_STRATEGY: none
  before_script:
    - IMAGES=(
      "nl-wallet-app-builder-android-flutter-rust"
      "nl-wallet-app-builder-flutter"
      "nl-wallet-app-builder-flutter-rust"
      "nl-wallet-app-builder-ruby"
      "nl-wallet-app-builder-rust"
      "nl-wallet-mock-relying-party"
      "nl-wallet-provider-migrations"
      "nl-wallet-provider"
      "nl-wallet-pid-issuer"
      "nl-wallet-server-migration"
      "nl-wallet-server"
      )
    - mkdir -p trivy
  script:
    - |
      BASIC_AUTH="${HARBOR_GN2_ROBOT_NAME}:$(base64 --decode <<< ${HARBOR_GN2_ROBOT_SECRET})"
      for IMAGE in "${IMAGES[@]}"; do
        ARTIFACTS_URL="https://${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_NLW_PROJECT}/repositories/${IMAGE}/artifacts?page_size=1&page=1&sort=-push_time"
        VULNERABILITIES_HREF=$(curl --user "${BASIC_AUTH}" --url "${ARTIFACTS_URL}" | jq ".[] | .addition_links.vulnerabilities.href" | sed -e 's/^"//' -e 's/"$//')
        VULNERABILITIES_URL="https://${HARBOR_REGISTRY}${VULNERABILITIES_HREF}"
        curl --user "${BASIC_AUTH}" -o "trivy/${IMAGE}.json" $VULNERABILITIES_URL
      done
  artifacts:
    paths:
      - trivy

.run-wp-migrations:
  needs:
    - job: build-wp-migrations-image
      artifacts: false
  variables:
    WALLET_PROVIDER_MIGRATIONS_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-provider-migrations:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/wallet-provider-migration-job.yaml | kubectl apply -f -
    - kubectl wait --for=condition=complete --timeout=300s job -l app=wallet-provider-migrations

run-wp-migrations-ont:
  extends: [.env-ont-k8s, .run-wp-migrations]
  rules: !reference [.default-branch, rules]

run-wp-migrations-demo:
  extends: [.env-demo-k8s, .run-wp-migrations]
  rules: !reference [.release-tag, rules]

.deploy-wallet-provider:
  needs:
    - job: build-wp-image
      artifacts: false
  variables:
    WALLET_PROVIDER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-provider:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/servicemonitors.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/wallet-provider-configmap.yaml
    - envsubst < kubernetes/wallet-provider-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/wallet-provider-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/wallet-provider-service.yaml
    - kubectl apply -f kubernetes/wallet-provider-network-policies.yaml
    - kubectl rollout status deployment/wallet-provider

deploy-wallet-provider-ont:
  extends: [.env-ont-k8s, .deploy-wallet-provider]
  rules: !reference [.default-branch, rules]
  needs:
    - job: run-wp-migrations-ont
      artifacts: false
  variables:
    WALLET_PROVIDER_EXTERNAL_HOSTNAME: $WALLET_PROVIDER_EXTERNAL_HOSTNAME_ONT
    WALLET_PROVIDER_INTERNAL_HOSTNAME: $WALLET_PROVIDER_INTERNAL_HOSTNAME_ONT

deploy-wallet-provider-demo:
  extends: [.env-demo-k8s, .deploy-wallet-provider]
  rules: !reference [.release-tag, rules]
  needs:
    - job: run-wp-migrations-demo
      artifacts: false
  variables:
    WALLET_PROVIDER_EXTERNAL_HOSTNAME: $WALLET_PROVIDER_EXTERNAL_HOSTNAME_DEMO
    WALLET_PROVIDER_INTERNAL_HOSTNAME: $WALLET_PROVIDER_INTERNAL_HOSTNAME_DEMO

.deploy-pid-issuer:
  needs:
    - job: build-pid-issuer-image
      artifacts: false
  variables:
    PID_ISSUER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-pid-issuer:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/pid-issuer-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/pid-issuer-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/pid-issuer-service.yaml
    - kubectl rollout status deployment/pid-issuer

deploy-pid-issuer-ont:
  extends: [.env-ont-k8s, .deploy-pid-issuer]
  rules: !reference [.default-branch, rules]
  variables:
    PID_ISSUER_EXTERNAL_HOSTNAME: $PID_ISSUER_EXTERNAL_HOSTNAME_ONT
    DIGID_CONNECTOR_EXTERNAL_HOSTNAME: $DIGID_CONNECTOR_EXTERNAL_HOSTNAME_ONT

deploy-pid-issuer-demo:
  extends: [.env-demo-k8s, .deploy-pid-issuer]
  rules: !reference [.release-tag, rules]
  variables:
    PID_ISSUER_EXTERNAL_HOSTNAME: $PID_ISSUER_EXTERNAL_HOSTNAME_DEMO
    DIGID_CONNECTOR_EXTERNAL_HOSTNAME: $DIGID_CONNECTOR_EXTERNAL_HOSTNAME_DEMO

.run-ws-migrations:
  needs:
    - job: build-ws-migrations-image
      artifacts: false
  variables:
    WALLET_PROVIDER_MIGRATIONS_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-server-migrations:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < kubernetes/mrp-wallet-server-migration-job.yaml | kubectl apply -f -
    - kubectl wait --for=condition=complete --timeout=300s job -l app=mrp-wallet-server-migrations

run-ws-migrations-ont:
  extends: [.env-ont-k8s, .run-ws-migrations]
  rules: !reference [.default-branch, rules]

run-ws-migrations-demo:
  extends: [.env-demo-k8s, .run-ws-migrations]
  rules: !reference [.release-tag, rules]

.deploy-mock-relying-party:
  needs:
    - job: build-mock-relying-party-image
      artifacts: false
    - job: build-wallet-server-image
      artifacts: false
  variables:
    MOCK_RELYING_PARTY_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-mock-relying-party:${CI_COMMIT_SHORT_SHA}
    MRP_WALLET_SERVER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-server:${CI_COMMIT_SHORT_SHA}
    UNIVERSAL_LINK_BASE: "https://${UL_HOSTNAME}/deeplink/"
  script:
    - envsubst < kubernetes/mrp-wallet-server-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/mrp-wallet-server-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/mrp-wallet-server-service.yaml
    - kubectl apply -f kubernetes/mrp-wallet-server-network-policies.yaml
    - kubectl rollout status deployment/mrp-wallet-server
    - envsubst < kubernetes/mock-relying-party-deployment.yaml | kubectl apply -f -
    - envsubst < kubernetes/mock-relying-party-ingress.yaml | kubectl apply -f -
    - kubectl apply -f kubernetes/mock-relying-party-service.yaml
    - kubectl rollout status deployment/mock-relying-party

deploy-mock-relying-party-ont:
  extends: [.env-ont-k8s, .deploy-mock-relying-party]
  rules: !reference [.default-branch, rules]
  variables:
    MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME: $MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME_ONT
    MRP_WALLET_SERVER_INTERNAL_HOSTNAME: $MRP_WALLET_SERVER_INTERNAL_HOSTNAME_ONT
    MRP_WALLET_SERVER_EXTERNAL_HOSTNAME: $MRP_WALLET_SERVER_EXTERNAL_HOSTNAME_ONT
    UL_HOSTNAME: $EXTERNAL_HOSTNAME_ONT

deploy-mock-relying-party-demo:
  extends: [.env-demo-k8s, .deploy-mock-relying-party]
  rules: !reference [.release-tag, rules]
  variables:
    MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME: $MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME_DEMO
    MRP_WALLET_SERVER_INTERNAL_HOSTNAME: $MRP_WALLET_SERVER_INTERNAL_HOSTNAME_DEMO
    MRP_WALLET_SERVER_EXTERNAL_HOSTNAME: $MRP_WALLET_SERVER_EXTERNAL_HOSTNAME_DEMO
    UL_HOSTNAME: $EXTERNAL_HOSTNAME_DEMO

check-gitlab-ci-changed:
  rules:
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
  script:
    - git fetch origin
    # fails if .gitlab-ci.yml is different on CI_DEFAULT_BRANCH
    - git diff --exit-code origin/$CI_DEFAULT_BRANCH -- .gitlab-ci.yml

.run-automation-tests:
  resource_group: automation-tests
  extends: .env-ont-k8s
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-jdk11@sha256:1b0d6c2f6fe1e66d5f72e3d76648c973c9d0c0fa1bf57c3d94da30f6e8c97414"
  artifacts:
    when: always
    paths:
      - uiautomation/build/test-results
      - uiautomation/build/reports
  before_script:
    - export BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - set -euxo pipefail
    - java -version
    - git fetch origin
    - git checkout $CI_DEFAULT_BRANCH
    - cd uiautomation
  script:
    - gradle wrapper --gradle-version=7.3.3
    - ./gradlew --debug --stacktrace test
      --tests "feature.appstart.*"
      --tests "feature.introduction.*"
      --tests "feature.security.*"
      --tests "feature.lock.*"

run-automation-tests-12:
  extends: [.run-automation-tests]
  rules:
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
  needs:
    - job: run-automation-tests-13
      artifacts: false
    - job: run-automation-tests-14
      artifacts: false
  variables:
    BROWSERSTACK_DEVICE: "Google Pixel 6"

run-automation-tests-13:
  extends: [.run-automation-tests]
  rules:
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
  needs:
    - job: run-automation-tests-14
      artifacts: false
  variables:
    BROWSERSTACK_DEVICE: "Google Pixel Pro 7"

run-automation-tests-14:
  extends: [.run-automation-tests]
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: manual
  variables:
    BROWSERSTACK_DEVICE: "Google Pixel 8"

build-sbom:
  rules: !reference [.default-branch, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-cyclonedx@sha256:fde8c80553826d9bb81d6ef165fccf896391258c7e6d5e4c10e184f9dff829bd"
  script:
    ## Rust
    - cargo cyclonedx --manifest-path wallet_core/Cargo.toml --format json
    - cargo cyclonedx --manifest-path wallet_core/flutter_rust_bridge_codegen/Cargo.toml --format json
    - cargo cyclonedx --manifest-path wallet_core/uniffi-bindgen/Cargo.toml --format json
    ## Flutter
    - cd wallet_app; cdxgen --type dart --output bom.json; cd -
    ## iOS
    # does not support json, so converting to it (we need it to be able to merge)
    - bundle install
    - cd wallet_app
    - flutter pub get
    - flutter precache --ios
    - cd ios
    - bundle exec pod install --allow-root
    - cyclonedx-cocoapods
    - cyclonedx convert --input-file bom.xml --output-file bom.json
    - cd ../..
    ## Android
    - cd wallet_app/android/app; cdxgen -t gradle -o bom.json; cd -
    - cd wallet_core/platform_support/android/platform_support; cdxgen -t gradle -o bom.json; cd -
    # merge sboms into one (this doesn't work when using XML, because the cdxgen bom.xml is invalid)
    - cyclonedx merge --input-files `find . -name bom.json` --output-file bom.json
    # converting it to xml does work
    - cyclonedx convert --input-file bom.json --output-file bom.xml
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  artifacts:
    when: always
    paths:
      - ./bom.xml
      - ./bom.json
