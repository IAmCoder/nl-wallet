include:
  - "deploy/gitlab/build-docker-images.yml"
  - "deploy/gitlab/sonar.yml"
  - "deploy/gitlab/wallet-env-config.yml"

default:
  image: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-debian@sha256:529d9b3c3ea0b58a71e522837230b6ed473f24b8ec91ea8bc311ea6fa3e7d806"

variables:
  CACHE_COMPRESSION_LEVEL: "fastest"
  FF_USE_FASTZIP: "true"
  FLUTTER_APP_PROJECT_DIR: "wallet_app"
  CARGO_HOME: "${CI_PROJECT_DIR}/.cargo"
  CARGO_INCREMENTAL: 0
  CARGO_PROFILE_TEST_DEBUG: "line-tables-only"
  APP_BUILD_OFFSET: 861

.env-ont:
  environment:
    name: ${K8S_CLUSTER}
    deployment_tier: development
    action: access

.env-demo:
  environment:
    name: ${K8S_DEMO_CLUSTER}
    deployment_tier: staging
    action: access

.env-ont-k8s:
  extends: .env-ont
  environment:
    action: start
    kubernetes:
      namespace: ${K8S_NAMESPACE}

.env-demo-k8s:
  extends: .env-demo
  environment:
    kubernetes:
      namespace: ${K8S_DEMO_NAMESPACE}

.env-macos-runner:
  before_script:
    - set -euo pipefail
    - kubectl config set-cluster s15m --server="$K8S_CLUSTER_SERVER"
    - kubectl config set-context s15m --cluster=s15m --namespace="$K8S_NAMESPACE"
    - kubectl config set-credentials macos-runner-service-account --token="$(echo "$MACOS_RUNNER_SERVICE_ACCOUNT_TOKEN_B64" | base64 -d)"
    - kubectl config set-context s15m --user=macos-runner-service-account
    - kubectl config use-context s15m

.default-branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        CACHE_POLICY: pull-push

.release-tag:
  before_script:
    - RELEASE_VERSION="$(echo $CI_COMMIT_TAG | grep -E '^release-v[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+$' | sed -E 's/^release-v//')"
  rules:
    - if: $CI_COMMIT_TAG =~ /^release-v\d+\.\d+\.\d+$/
      variables:
        CACHE_POLICY: pull

.merge-request:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        CACHE_POLICY: pull

.merge-request-manual:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        CACHE_POLICY: pull
      when: manual
      # jobs that have "when: manual" in rules are non optional in Gitlab CI/CD
      allow_failure: true

.default-or-release:
  rules:
    - !reference [.default-branch, rules]
    - !reference [.release-tag, rules]

.default-or-merge-request:
  rules:
    - !reference [.default-branch, rules]
    - !reference [.merge-request, rules]

.default-or-release-or-merge-request:
  rules:
    - !reference [.default-or-release, rules]
    - !reference [.merge-request, rules]

.default-or-release-or-merge-request-manual:
  rules:
    - !reference [.default-or-release, rules]
    - !reference [.merge-request-manual, rules]

.rust-cache:
  cache:
    key: rust-${CI_JOB_NAME_SLUG}-${CI_DEFAULT_BRANCH}
    paths:
      - ".cargo/git"
      - ".cargo/registry/index"
      - ".cargo/registry/cache"
      - "wallet_core/target/"
      - "wallet_core/flutter_rust_bridge_codegen/target"
      - "wallet_core/uniffi-bindgen/target"
    policy: ${CACHE_POLICY}

.ruby-cache:
  cache:
    key: ruby-${CI_COMMIT_REF_SLUG}
    paths:
      - "vendor/ruby"
  before_script:
    - ruby -v
    - bundle config set --local path "vendor/ruby"

.ruby-cache-macos:
  extends: .ruby-cache
  cache:
    key: ruby-macos-${CI_COMMIT_REF_SLUG}

test-flutter:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter@sha256:1cea6e8f389e9237f27dadf896a9ce4530dd9423ba43fbf6896dd184794ff2b3"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub get --enforce-lockfile)
    - flutter analyze $FLUTTER_APP_PROJECT_DIR
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --exclude-tags=golden --coverage --branch-coverage --coverage-path coverage/lcov.info --file-reporter "json:build/reports/test-results.json")
  artifacts:
    paths:
      - $FLUTTER_APP_PROJECT_DIR/coverage/lcov.info
      - $FLUTTER_APP_PROJECT_DIR/build/reports/test-results.json

test-flutter-ui:
  rules: !reference [.default-or-release-or-merge-request, rules]
  when: manual
  tags:
    - macos
  image: sonoma-wallet:0.1.0
  artifacts:
    name: "ui-test-failures"
    when: on_failure
    paths:
      - "**/failures/*.png"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --tags=golden)

# Checks .arb files for unused keys, indicating an update to Lokalise might be in order
verify-flutter-localizations:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter@sha256:1cea6e8f389e9237f27dadf896a9ce4530dd9423ba43fbf6896dd184794ff2b3"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter pub get --enforce-lockfile)
    - (cd $FLUTTER_APP_PROJECT_DIR; dart run translations_cleaner list-unused-terms) # List any unused keys
    - (cd $FLUTTER_APP_PROJECT_DIR; dart run translations_cleaner list-unused-terms --abort-on-unused) # Fail if unused keys are found
  allow_failure: true # Only meant as a warning, our current workflow might introduce keys from other WIP MRs, which could cause false positives.

lint-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:4a4f49ce40693fbc9040869aa98822de3bfa87594ba7c7f25e5091f21a943fe5"
  cache: !reference [.rust-cache, cache]
  script:
    - set -euxo pipefail
    # Check Rust formatting
    - find wallet_core -mindepth 2 -type f -name Cargo.toml -print0 | xargs -0 -n1 -I {} cargo fmt --manifest-path {} -- --check
    # Check clippy
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    - grep ^exclude wallet_core/Cargo.toml | grep -oP '".*?"' | tr -d '"' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings

test-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:4a4f49ce40693fbc9040869aa98822de3bfa87594ba7c7f25e5091f21a943fe5"
  cache: !reference [.rust-cache, cache]
  variables:
    SKIP_DIGID_CONNECTOR: "true"
    SKIP_WALLET_WEB: "true"
    SKIP_MOCK_RELYING_PARTY: "true"
    WALLET_PROVIDER_DATABASE__HOST: "postgres"
    WALLET_SERVER_STORE_URL: "postgres://postgres:postgres@postgres:5432/verification_server"
  services:
    - name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-postgres@sha256:8260dcdfd90b550c80d8a2e5527c0efb2280b371ab34c28f713f770a749c49dc"
      alias: postgres
      variables:
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "postgres"
        POSTGRES_INITDB_ARGS: "--encoding=UTF8"
        POSTGRES_MULTIPLE_DATABASES: "wallet_provider,verification_server"
  before_script:
    - set -euxo pipefail
    - ./scripts/setup-devenv.sh
    - cd wallet_core
  script:
    - cargo run --bin wallet_provider_migrations --locked -- up
    - DATABASE_URL="${WALLET_SERVER_STORE_URL}" cargo run --bin wallet_server_migration --locked -- up
    - cargo llvm-cov test --features integration_test --locked --lcov --output-path lcov.info
    - cargo llvm-cov report --locked --cobertura --output-path rust-coverage.xml
  artifacts:
    reports:
      coverage_report:
        path: wallet_core/rust-coverage.xml
        coverage_format: cobertura
    paths:
      - wallet_core/lcov.info

.test-rust-compilation:
  rules: !reference [.default-or-release-or-merge-request, rules]
  variables:
    RUSTFLAGS: "-D warnings"
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_provider --bin wallet_provider
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_provider_migrations --bin wallet_provider_migrations
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package configuration_server --bin configuration_server
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_server --no-default-features --bin pid_issuer --features issuance,postgres
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_server --no-default-features --bin wallet_server --features issuance,disclosure,postgres
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_server --no-default-features --bin verification_server --features disclosure,postgres
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package wallet_server_migration --bin wallet_server_migration
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package mock_relying_party --bin mock_relying_party
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package gba_hc_converter --bin gba_hc_converter

test-rust-compilation-android-linux:
  extends: .test-rust-compilation
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:87a2667a35d932da24b937e1e96770a2a12ea0f2204a8a97b1740dc120dc1394"
  script:
    - !reference [.test-rust-compilation, script]
    - (cd wallet_core; cargo ndk --target arm64-v8a check --package flutter_api --locked --release)

test-rust-compilation-ios:
  extends: .test-rust-compilation
  tags:
    - macos
  image: sonoma-wallet:0.1.0
  script:
    - !reference [.test-rust-compilation, script]
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package flutter_api --target aarch64-apple-ios

#test-android:
#  extends: .ruby-cache
#  rules: !reference [.default-or-release-or-merge-request, rules]
#  image:
#    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-emulator-rust@sha256:d6585b8aa3ffbb4f8180985404ba579e450ce85ca6ec571c99e160269f14946f"
#  artifacts:
#    when: always
#    reports:
#      coverage_report:
#        path: wallet_core/platform_support/android/platform_support/src/main/java/cobertura.xml
#        coverage_format: cobertura
#    paths:
#      - wallet_core/platform_support/android/platform_support/build/reports/**
#      - wallet_core/platform_support/android/platform_support/build/outputs/androidTest-results
#  before_script:
#    - echo "no" | avdmanager -s create avd --name $CI_JOB_NAME_SLUG --package "system-images;android-24;default;arm64-v8a"
#  script:
#    - emulator-check cpu-info || true
#    - emulator-check accel || true
#    - emulator @${CI_JOB_NAME_SLUG} -show-kernel -log-detailed -no-window -no-snapshot -no-boot-anim -cores 2 -memory 2048 -audio none -accel off -gpu swiftshader_indirect -camera-back none -qemu -machine virt
#    - EMULATOR_PID=$!
#    - adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done'
#    - wallet_core/platform_support/android/gradlew -p wallet_core/platform_support/android connectedAndroidTest
#    - wallet_core/platform_support/android/gradlew -p wallet_core/platform_support/android jacocoToCobertura
#    - kill $EMULATOR_PID && while $(kill -0 $EMULATOR_PID 2>/dev/null); do sleep 1; done
#    - avdmanager delete avd --name $CI_JOB_NAME_SLUG

test-ios:
  extends: .ruby-cache
  rules: !reference [.default-or-release-or-merge-request, rules]
  tags:
    - macos
  image: sonoma-wallet:0.1.0
  artifacts:
    when: always
    reports:
      coverage_report:
        path: wallet_core/platform_support/ios/cobertura.xml
        coverage_format: cobertura
    paths:
      - "fastlane/test_output/*"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane ios test
    - cp fastlane/test_output/cobertura.xml wallet_core/platform_support/ios/

test-codegen:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter-rust@sha256:7cad7ea91533413935f181e050437b7ef6a7c381c201b40fb7b010fe28cc560c"
  cache: !reference [.rust-cache, cache]
  script:
    - set -euxo pipefail
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub get --enforce-lockfile)
    - cargo run --manifest-path wallet_core/flutter_rust_bridge_codegen/Cargo.toml --locked
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub run build_runner build --delete-conflicting-outputs)
    - dart format wallet_app --line-length 120
    - git diff
    - if [ $(git diff --shortstat | wc -l) -gt 0 ]; then echo "Code generation results in different files!"; exit 1; fi

build-wallet-web:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "$HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-app-builder-node@sha256:e39c667e35c85a7ddb6af091ae79c64e5455e11495ca2d441e0e41e3a45248e8"
  script:
    - set -euxo pipefail
    - (cd wallet_web; npm ci && npm run type-check && npm run coverage -- --run)
    - (cd wallet_web; CUSTOM_ELEMENT=false npm run build)
    - (cd wallet_web; EMPTY_OUTPUT_DIR=false CUSTOM_ELEMENT=true npm run build)
    - WALLET_WEB_SHA256_FILENAME=$(cat wallet_web/dist/nl-wallet-web.iife.js | openssl sha256 -binary | base64 | tr '/+' '_-' | tr -d '=\n') # url safe to prevent '/' to appear in filename
    - export WALLET_WEB_SHA256_FILENAME
    - WALLET_WEB_FILENAME="nl-wallet-web.${WALLET_WEB_SHA256_FILENAME}.iife.js"
    - export WALLET_WEB_FILENAME
    - cp wallet_web/dist/nl-wallet-web.iife.js wallet_core/mock_relying_party/assets/${WALLET_WEB_FILENAME}
    - export WALLET_WEB_SHA256=$(cat wallet_core/mock_relying_party/assets/${WALLET_WEB_FILENAME} | openssl sha256 -binary | base64)
    # take the sha256 hash of every JS files and format them accordingly
    - JS_HASHES=$(find wallet_core/mock_relying_party/assets -regex '.*\.js' -exec bash -c 'echo sha256-`openssl sha256 -binary "$1" | base64`' _ {} \; | tr '\n' ';' | sed "s/;$/'\n/; s/^/'/; s/;/' '/g")
    - CSP_SCRIPT_SRC_MRP=${JS_HASHES:-\'none\'}
    - export CSP_SCRIPT_SRC_MRP
    # take the sha256 hash of the inlined style and add it to the default directive
    - STYLE_INJECTED_HASH=$(echo \'sha256-`cat wallet_web/dist/style.css | tr -d "\n" | openssl sha256 -binary | base64`\')
    - CSP_STYLE_SRC_MRP="'self' ${STYLE_INJECTED_HASH}"
    - export CSP_STYLE_SRC_MRP
    - mkdir -p wallet_core/mock_relying_party/hashes
    - echo $CSP_SCRIPT_SRC_MRP | base64 > wallet_core/mock_relying_party/hashes/csp_script_src_mrp_base64.txt
    - echo $CSP_STYLE_SRC_MRP | base64 > wallet_core/mock_relying_party/hashes/csp_style_src_mrp_base64.txt
    - echo $WALLET_WEB_FILENAME > wallet_core/mock_relying_party/hashes/wallet_web_filename.txt
    - echo $WALLET_WEB_SHA256 > wallet_core/mock_relying_party/hashes/wallet_web_sha256.txt
  artifacts:
    paths:
      - wallet_web/dist
      - wallet_web/coverage
      - wallet_core/mock_relying_party/assets/nl-wallet-web.*
      - wallet_core/mock_relying_party/hashes/*.txt

dependency-check:
  extends: .env-ont-k8s
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "$HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-app-builder-dependency-check@sha256:7578d0177b3ddba58d619a4a03dd0afa0427bf05e72d1a57e11db93a69211ad8"
  before_script:
    - NVD_API_KEY="$(kubectl get secret nl-wallet-nist-nvd -o jsonpath='{.data.api-key}' | base64 --decode)"
    - (cd wallet_web; npm ci)
    - mkdir -p $CI_PROJECT_DIR/dependency_check_data
  script:
    - dependency-check.sh
      --data $CI_PROJECT_DIR/dependency_check_data
      --disableDart
      --disableAssembly
      --disableYarnAudit
      --enableExperimental
      --format "HTML" --format "JSON" --format "XML"
      --scan "."
      --suppression $CI_PROJECT_DIR/dependency_check_suppressions.xml
      --nvdApiKey "$NVD_API_KEY"
  artifacts:
    when: always
    paths:
      - dependency-check-report.json
      - dependency-check-report.html
      - dependency-check-report.xml
  cache:
    key: dependency-check-${CI_JOB_NAME_SLUG}-${CI_DEFAULT_BRANCH}
    paths:
      - $CI_PROJECT_DIR/dependency_check_data
    policy: $CACHE_POLICY
  allow_failure: true

osv-scanner:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "$HARBOR_REGISTRY/ghcr-io-proxy/google/osv-scanner:latest"
  script:
    - /osv-scanner --format sarif --recursive "$CI_PROJECT_DIR" > osv.sarif || true
  artifacts:
    paths:
      - osv.sarif

dependency-check-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:4a4f49ce40693fbc9040869aa98822de3bfa87594ba7c7f25e5091f21a943fe5"
  before_script:
    - mkdir $CI_PROJECT_DIR/dependency_check_data
  script:
    # Note: RUSTSEC-2023-0071 is currently unfixable, a false positive and irrelevant for us, therefore we ignore it
    - |
      cargo audit \
        --ignore RUSTSEC-2023-0071 \
        --file wallet_core/Cargo.lock \
        --json | tee audit.json | jq
  artifacts:
    when: always
    paths:
      - audit.json
  allow_failure: true

### Android building
.build-android-app:
  extends: .ruby-cache
  needs:
    - job: test-flutter
      artifacts: false
    - job: test-codegen
      artifacts: false
    - job: test-rust
      artifacts: false
    - job: test-rust-compilation-android-linux
      artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:87a2667a35d932da24b937e1e96770a2a12ea0f2204a8a97b1740dc120dc1394"
  cache: !reference [.rust-cache, cache]
  artifacts:
    name: "wallet-android"
    paths:
      - "*.aab"
      - "*.apk"
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
    UNIVERSAL_LINK_BASE: "https://${UL_HOSTNAME}/deeplink/"
  script:
    - kubectl get secret nl-wallet-play-store-upload-key -o jsonpath='{.data.keystore}' | base64 --decode > wallet_app/android/upload-keystore.jks
    - kubectl get secret nl-wallet-play-store-upload-key -o jsonpath='{.data.key-properties}' | base64 --decode > wallet_app/android/key.properties
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - |
      bundle exec fastlane android build \
        package_name:"${INTERNAL_APP_IDENTIFIER}${APP_PACKAGE_IDENTIFIER_SUFFIX:+.$APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        app_name:"${APP_NAME}" \
        file_format:"${APP_FILE_FORMAT}" \
        build_mode:"${APP_BUILD_MODE}" \
        mock:"${APP_MOCK}" \
        universal_link_base:"${UL_HOSTNAME:-}" \
        build:"$((CI_PIPELINE_IID + APP_BUILD_OFFSET))" \
        version:"${RELEASE_VERSION:-}"
  after_script:
    - rm wallet_app/android/upload-keystore.jks wallet_app/android/key.properties

.build-android-app-ont:
  extends: [.env-ont-k8s, .build-android-app]
  rules: !reference [.default-branch, rules]
  needs:
    - !reference [.build-android-app, needs]
    - job: wallet-env-config-ont
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"
    APP_NAME: "NL Wallet (latest)"
    APP_MOCK: "false"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_ONT}"

build-android-app-ont:
  extends: .build-android-app-ont
  variables:
    APP_FILE_FORMAT: "aab"
    APP_BUILD_MODE: "release"
    SENTRY_DSN: "${SENTRY_DSN_ONT}"
    SENTRY_ENVIRONMENT: "ont"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_ONT}"
    SENTRY_ORG: "${SENTRY_ORG_ONT}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_ONT}"
    SENTRY_URL: "https://sentry.io/"

build-android-app-ont-profile:
  extends: .build-android-app-ont
  variables:
    APP_FILE_FORMAT: "apk"
    APP_BUILD_MODE: "profile"

.build-android-app-release-tag:
  extends: [.env-ont-k8s, .build-android-app]
  rules: !reference [.release-tag, rules]
  before_script:
    - !reference [.release-tag, before_script]
  variables:
    APP_MOCK: "false"
    APP_FILE_FORMAT: "aab"
    APP_BUILD_MODE: "release"

build-android-app-mock:
  extends: .build-android-app-release-tag
  needs:
    - !reference [.build-android-app, needs]
  variables:
    APP_MOCK: "true" # override .build-android-app-release-tag
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"
    APP_NAME: "NL Wallet (mock)"
    SENTRY_DSN: "${SENTRY_DSN_MOCK}"
    SENTRY_ENVIRONMENT: "mock"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_MOCK}"
    SENTRY_ORG: "${SENTRY_ORG_MOCK}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_MOCK}"
    SENTRY_URL: "https://sentry.io/"

.build-android-app-demo:
  extends: .build-android-app-release-tag
  needs:
    - !reference [.build-android-app, needs]
    - job: wallet-env-config-demo
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"
    APP_NAME: "NL Wallet (demo)"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_DEMO}"

build-android-app-demo:
  extends: .build-android-app-demo
  variables:
    SENTRY_DSN: "${SENTRY_DSN_DEMO}"
    SENTRY_ENVIRONMENT: "demo"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_DEMO}"
    SENTRY_ORG: "${SENTRY_ORG_DEMO}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_DEMO}"
    SENTRY_URL: "https://sentry.io/"

build-android-app-demo-profile:
  extends: .build-android-app-demo
  variables:
    APP_FILE_FORMAT: "apk" # override .build-android-app-release-tag
    APP_BUILD_MODE: "profile" # override .build-android-app-release-tag

build-android-app-acceptance:
  extends: .build-android-app-release-tag
  needs:
    - !reference [.build-android-app, needs]
    - job: wallet-env-config-acceptance
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "acceptance"
    APP_NAME: "NL Wallet (acceptance)"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_ACC}"
    SENTRY_DSN: "${SENTRY_DSN_ACC}"
    SENTRY_ENVIRONMENT: "acceptance"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_ACC}"
    SENTRY_ORG: "${SENTRY_ORG_ACC}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_ACC}"
    SENTRY_URL: "https://sentry.io/"

build-android-app-preproduction:
  extends: .build-android-app-release-tag
  needs:
    - !reference [.build-android-app, needs]
    - job: wallet-env-config-preproduction
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "preproduction"
    APP_NAME: "NL Wallet (pre-production)"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_PREPROD}"
    SENTRY_DSN: "${SENTRY_DSN_PREPROD}"
    SENTRY_ENVIRONMENT: "preproduction"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_PREPROD}"
    SENTRY_ORG: "${SENTRY_ORG_PREPROD}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_PREPROD}"
    SENTRY_URL: "https://sentry.io/"

build-android-app-production:
  extends: .build-android-app-release-tag
  needs:
    - !reference [.build-android-app, needs]
    - job: wallet-env-config-production
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: ""
    APP_NAME: "NL Wallet (production)"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_PROD}"
    SENTRY_DSN: "${SENTRY_DSN_PROD}"
    SENTRY_ENVIRONMENT: "production"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_PROD}"
    SENTRY_ORG: "${SENTRY_ORG_PROD}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_PROD}"
    SENTRY_URL: "https://sentry.io/"

### iOS Building
.build-ios-app:
  extends: [.env-macos-runner, .ruby-cache-macos]
  needs:
    - job: test-flutter
      artifacts: false
    - job: test-codegen
      artifacts: false
    - job: test-rust
      artifacts: false
    - job: test-ios
      artifacts: false
    - job: test-rust-compilation-ios
      artifacts: false
  tags:
    - macos
  image: sonoma-wallet:0.1.0
  artifacts:
    name: "wallet-ios"
    paths:
      - "*.ipa"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
    UNIVERSAL_LINK_BASE: "https://${UL_HOSTNAME}/deeplink/"
  before_script:
    - !reference [.env-macos-runner, before_script]
    - !reference [.ruby-cache-macos, before_script]
  script:
    - set -euo pipefail
    - MATCH_PASSWORD="$(kubectl get secret nl-wallet-fastlane-match -o jsonpath='{.data.password}' | base64 --decode)"
    - export MATCH_PASSWORD
    - (git config --global url.https://gitlab-ci-token:$CI_JOB_TOKEN@$CI_SERVER_HOST.insteadOf https://$CI_SERVER_HOST)
    - HTTP_PROXY="" HTTPS_PROXY="" bundle install --retry=10
    - bundle exec fastlane disable_flutter_analytics
    - |
      bundle exec fastlane ios ci_build \
        bundle_id:"${INTERNAL_APP_IDENTIFIER}${APP_PACKAGE_IDENTIFIER_SUFFIX:+.$APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        app_name:"${APP_NAME}" \
        build_mode:"${APP_BUILD_MODE}" \
        mock:"${APP_MOCK}" \
        universal_link_base:"${UL_HOSTNAME:-}" \
        build:"$((CI_PIPELINE_IID + APP_BUILD_OFFSET))" \
        version:"${RELEASE_VERSION:-}"

.build-ios-app-ont:
  extends: [.env-ont-k8s, .build-ios-app]
  rules: !reference [.default-branch, rules]
  needs:
    - !reference [.build-ios-app, needs]
    - job: wallet-env-config-ont
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"
    APP_NAME: "NL Wallet (latest)"
    APP_MOCK: "false"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_ONT}"

build-ios-app-ont:
  extends: .build-ios-app-ont
  variables:
    APP_BUILD_MODE: "release"
    SENTRY_DSN: "${SENTRY_DSN_ONT}"
    SENTRY_ENVIRONMENT: "ont"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_ONT}"
    SENTRY_ORG: "${SENTRY_ORG_ONT}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_ONT}"
    SENTRY_URL: "https://sentry.io/"

# build-ios-app-ont-profile:
#   extends: .build-ios-app-ont
#   variables:
#     APP_BUILD_MODE: "profile"

.build-ios-app-release-tag:
  extends: .build-ios-app
  rules: !reference [.release-tag, rules]
  before_script:
    - !reference [.build-ios-app, before_script]
    - !reference [.release-tag, before_script]
  variables:
    APP_MOCK: "false"
    APP_BUILD_MODE: "release"

build-ios-app-mock:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
  variables:
    APP_MOCK: "true" # override .build-ios-app-release-tag
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"
    APP_NAME: "NL Wallet (mock)"
    SENTRY_DSN: "${SENTRY_DSN_MOCK}"
    SENTRY_ENVIRONMENT: "mock"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_MOCK}"
    SENTRY_ORG: "${SENTRY_ORG_MOCK}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_MOCK}"
    SENTRY_URL: "https://sentry.io/"

.build-ios-app-demo:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
    - job: wallet-env-config-demo
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"
    APP_NAME: "NL Wallet (demo)"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_DEMO}"

build-ios-app-demo:
  extends: .build-ios-app-demo
  variables:
    SENTRY_DSN: "${SENTRY_DSN_DEMO}"
    SENTRY_ENVIRONMENT: "demo"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_DEMO}"
    SENTRY_ORG: "${SENTRY_ORG_DEMO}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_DEMO}"
    SENTRY_URL: "https://sentry.io/"

# build-ios-app-demo-profile:
#   extends: .build-ios-app-demo
#   variables:
#     APP_BUILD_MODE: "profile" # override .build-ios-app-release-tag

build-ios-app-acceptance:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
    - job: wallet-env-config-acceptance
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "acceptance"
    APP_NAME: "NL Wallet (acceptance)"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_ACC}"
    SENTRY_DSN: "${SENTRY_DSN_ACC}"
    SENTRY_ENVIRONMENT: "acceptance"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_ACC}"
    SENTRY_ORG: "${SENTRY_ORG_ACC}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_ACC}"
    SENTRY_URL: "https://sentry.io/"

build-ios-app-preproduction:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
    - job: wallet-env-config-preproduction
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "preproduction"
    APP_NAME: "NL Wallet (pre-production)"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_PREPROD}"
    SENTRY_DSN: "${SENTRY_DSN_PREPROD}"
    SENTRY_ENVIRONMENT: "preproduction"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_PREPROD}"
    SENTRY_ORG: "${SENTRY_ORG_PREPROD}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_PREPROD}"
    SENTRY_URL: "https://sentry.io/"

build-ios-app-production:
  extends: .build-ios-app-release-tag
  needs:
    - !reference [.build-ios-app, needs]
    - job: wallet-env-config-production
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: ""
    APP_NAME: "NL Wallet"
    UL_HOSTNAME: "${APP_EXTERNAL_HOSTNAME_PROD}"
    SENTRY_DSN: "${SENTRY_DSN_PROD}"
    SENTRY_ENVIRONMENT: "production"
    SENTRY_AUTH_TOKEN: "${SENTRY_AUTH_TOKEN_PROD}"
    SENTRY_ORG: "${SENTRY_ORG_PROD}"
    SENTRY_PROJECT: "${SENTRY_PROJECT_PROD}"
    SENTRY_URL: "https://sentry.io/"

### Android deploying
.deploy-android-app:
  extends: [.env-ont-k8s, .ruby-cache]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  environment:
    action: start
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - JSON_KEY_DATA=$(kubectl get secret nl-wallet-play-store-api-key -o jsonpath='{.data.json}' | base64 --decode)
    - export JSON_KEY_DATA
    - bundle install
    - |
      bundle exec fastlane android ci_deploy \
        package_name:"${INTERNAL_APP_IDENTIFIER}${APP_PACKAGE_IDENTIFIER_SUFFIX:+.$APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        version:"${RELEASE_VERSION}"

deploy-android-app-ont:
  extends: .deploy-android-app
  rules: !reference [.default-branch, rules]
  needs:
    - job: build-android-app-ont
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"

.deploy-android-app-release-tag:
  extends: .deploy-android-app
  rules: !reference [.release-tag, rules]
  before_script:
    - !reference [.release-tag, before_script]

deploy-android-app-mock:
  extends: .deploy-android-app-release-tag
  needs:
    - job: build-android-app-mock
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"

deploy-android-app-demo:
  extends: .deploy-android-app-release-tag
  needs:
    - job: build-android-app-demo
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"

deploy-android-app-acceptance:
  extends: .deploy-android-app-release-tag
  needs:
    - job: build-android-app-acceptance
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "acceptance"

deploy-android-app-preproduction:
  extends: .deploy-android-app-release-tag
  needs:
    - job: build-android-app-preproduction
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "preproduction"

deploy-android-app-production:
  extends: .deploy-android-app-release-tag
  needs:
    - job: build-android-app-production
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: ""

.upload-browserstack-android-app:
  extends: .ruby-cache
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  # needs:
  #   - job: build-ios-app # only deploy apps when both apps have been built successfully
  #     artifacts: false
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_USER
    - BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - export BROWSERSTACK_KEY
    - bundle install
    - |
      bundle exec fastlane android ci_browserstack \
        package_name:"${INTERNAL_APP_IDENTIFIER}${APP_PACKAGE_IDENTIFIER_SUFFIX:+.$APP_PACKAGE_IDENTIFIER_SUFFIX}" \
        version:"${RELEASE_VERSION}"

upload-browserstack-android-app-ont:
  extends: [.env-ont-k8s, .upload-browserstack-android-app]
  rules: !reference [.default-branch, rules]
  needs:
    - job: build-android-app-ont-profile
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"

upload-browserstack-android-app-demo:
  extends: [.env-ont-k8s, .upload-browserstack-android-app]
  rules: !reference [.release-tag, rules]
  needs:
    - job: build-android-app-demo-profile
      artifacts: true
  before_script:
    - !reference [.release-tag, before_script]
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"

## iOS Deploying
.deploy-ios-app:
  extends: [.env-macos-runner, .ruby-cache-macos]
  tags:
    - macos
  image: sonoma-wallet:0.1.0
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  before_script:
    - !reference [.env-macos-runner, before_script]
    - !reference [.ruby-cache-macos, before_script]
  script:
    - APP_STORE_CONNECT_SECRETS_BASE64_JSON="$(kubectl get secret nl-wallet-app-store-api-key -o jsonpath='{.data}')"
    - export APP_STORE_CONNECT_SECRETS_BASE64_JSON
    - bundle install
    - |
      bundle exec fastlane ios ci_deploy \
        app_identifier:"${INTERNAL_APP_IDENTIFIER}${APP_PACKAGE_IDENTIFIER_SUFFIX:+.$APP_PACKAGE_IDENTIFIER_SUFFIX}"

deploy-ios-app-ont:
  extends: .deploy-ios-app
  rules: !reference [.default-branch, rules]
  needs:
    - job: build-ios-app-ont
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "latest"

.deploy-ios-app-release-tag:
  extends: .deploy-ios-app
  rules: !reference [.release-tag, rules]

deploy-ios-app-mock:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-mock
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "mock"

deploy-ios-app-demo:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-demo
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "demo"

deploy-ios-app-acceptance:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-acceptance
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "acceptance"

deploy-ios-app-preproduction:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-preproduction
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: "preproduction"

deploy-ios-app-production:
  extends: .deploy-ios-app-release-tag
  needs:
    - job: build-ios-app-production
      artifacts: true
  variables:
    APP_PACKAGE_IDENTIFIER_SUFFIX: ""

dependency-check-images:
  rules: !reference [.default-or-release, rules]
  needs:
    - job: build-wp-image
      artifacts: false
    - job: build-wp-migrations-image
      artifacts: false
    - job: build-ws-migrations-image
      artifacts: false
    - job: build-mock-relying-party-image
      artifacts: false
    - job: build-wallet-server-image
      artifacts: false
    - job: build-verification-server-image
      artifacts: false
    - job: build-pid-issuer-image
      artifacts: false
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-sonar-flutter@sha256:a832ee952d8a897aeb6961407eb42cbd133dbd9be92ff5ef02523c45e56d03da"
  variables:
    GIT_STRATEGY: none
  before_script:
    - IMAGES=(
      "nl-wallet-app-builder-android-flutter-rust"
      "nl-wallet-app-builder-flutter"
      "nl-wallet-app-builder-flutter-rust"
      "nl-wallet-app-builder-ruby"
      "nl-wallet-app-builder-rust"
      "nl-wallet-mock-relying-party"
      "nl-wallet-provider-migrations"
      "nl-wallet-provider"
      "nl-wallet-server-migration"
      "nl-wallet-server"
      "nl-verification-server"
      "nl-pid-issuer"
      "nl-wallet-gba-hc-converter"
      )
    - mkdir -p trivy
  script:
    - |
      BASIC_AUTH="${HARBOR_GN2_ROBOT_NAME}:$(base64 --decode <<< ${HARBOR_GN2_ROBOT_SECRET})"
      for IMAGE in "${IMAGES[@]}"; do
        ARTIFACTS_URL="https://${HARBOR_REGISTRY}/api/v2.0/projects/${HARBOR_NLW_PROJECT}/repositories/${IMAGE}/artifacts?page_size=1&page=1&sort=-push_time"
        VULNERABILITIES_HREF=$(curl --user "${BASIC_AUTH}" --url "${ARTIFACTS_URL}" | jq ".[] | .addition_links.vulnerabilities.href" | sed -e 's/^"//' -e 's/"$//')
        VULNERABILITIES_URL="https://${HARBOR_REGISTRY}${VULNERABILITIES_HREF}"
        curl --user "${BASIC_AUTH}" -o "trivy/${IMAGE}.json" $VULNERABILITIES_URL
      done
  artifacts:
    paths:
      - trivy

.run-wp-migrations:
  needs:
    - job: build-wp-migrations-image
      artifacts: false
  variables:
    WALLET_PROVIDER_MIGRATIONS_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-provider-migrations:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < deploy/kubernetes/wallet-provider-migration-job.yaml | kubectl apply -f -
    - kubectl wait --for=condition=complete --timeout=300s job -l app=wallet-provider-migrations

run-wp-migrations-ont:
  extends: [.env-ont-k8s, .run-wp-migrations]
  rules: !reference [.default-or-merge-request, rules]

run-wp-migrations-demo:
  extends: [.env-demo-k8s, .run-wp-migrations]
  rules: !reference [.release-tag, rules]

.deploy-wallet-provider:
  needs:
    - job: build-wp-image
      artifacts: false
  variables:
    WALLET_PROVIDER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-provider:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < deploy/kubernetes/servicemonitors.yaml | kubectl apply -f -
    - kubectl apply -f deploy/kubernetes/wallet-provider-configmap.yaml
    - envsubst < deploy/kubernetes/wallet-provider-deployment.yaml | kubectl apply -f -
    - envsubst < deploy/kubernetes/wallet-provider-ingress.yaml | kubectl apply -f -
    - kubectl apply -f deploy/kubernetes/wallet-provider-service.yaml
    - kubectl apply -f deploy/kubernetes/wallet-provider-network-policies.yaml
    - kubectl rollout status deployment/wallet-provider

deploy-wallet-provider-ont:
  extends: [.env-ont-k8s, .deploy-wallet-provider]
  rules: !reference [.default-or-merge-request, rules]
  needs:
    - !reference [.deploy-wallet-provider, needs]
    - job: run-wp-migrations-ont
      artifacts: false
  variables:
    WALLET_PROVIDER_EXTERNAL_HOSTNAME: $WALLET_PROVIDER_EXTERNAL_HOSTNAME_ONT
    WALLET_PROVIDER_INTERNAL_HOSTNAME: $WALLET_PROVIDER_INTERNAL_HOSTNAME_ONT
    SENTRY_DSN: "${SENTRY_DSN_ONT}"
    SENTRY_ENVIRONMENT: "ont"

deploy-wallet-provider-demo:
  extends: [.env-demo-k8s, .deploy-wallet-provider]
  rules: !reference [.release-tag, rules]
  needs:
    - !reference [.deploy-wallet-provider, needs]
    - job: run-wp-migrations-demo
      artifacts: false
  variables:
    WALLET_PROVIDER_EXTERNAL_HOSTNAME: $WALLET_PROVIDER_EXTERNAL_HOSTNAME_DEMO
    WALLET_PROVIDER_INTERNAL_HOSTNAME: $WALLET_PROVIDER_INTERNAL_HOSTNAME_DEMO
    SENTRY_DSN: "${SENTRY_DSN_DEMO}"
    SENTRY_ENVIRONMENT: "demo"

.run-mrp-vs-migrations:
  needs:
    - job: build-ws-migrations-image
      artifacts: false
  variables:
    WALLET_SERVER_MIGRATION_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-server-migrations:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < deploy/kubernetes/mrp-verification-server-migration-job.yaml | kubectl apply -f -
    - kubectl wait --for=condition=complete --timeout=300s job -l app=mrp-verification-server-migrations

run-mrp-vs-migrations-ont:
  extends: [.env-ont-k8s, .run-mrp-vs-migrations]
  rules: !reference [.default-or-merge-request, rules]

run-mrp-vs-migrations-demo:
  extends: [.env-demo-k8s, .run-mrp-vs-migrations]
  rules: !reference [.release-tag, rules]

.deploy-mock-relying-party:
  needs:
    - job: build-mock-relying-party-image
      artifacts: false
    - job: build-verification-server-image
      artifacts: false
    - job: build-wallet-web
      artifacts: true
  variables:
    MOCK_RELYING_PARTY_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-mock-relying-party:${CI_COMMIT_SHORT_SHA}
    MRP_VERIFICATION_SERVER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-verification-server:${CI_COMMIT_SHORT_SHA}
    UNIVERSAL_LINK_BASE: "https://${UL_HOSTNAME}/deeplink/"
  script:
    - set -euxo pipefail
    - envsubst < deploy/kubernetes/brpproxy-deployment.yaml | kubectl apply -f -
    - kubectl apply -f deploy/kubernetes/brpproxy-service.yaml
    - WALLET_WEB_FILENAME=$(cat wallet_core/mock_relying_party/hashes/wallet_web_filename.txt)
    - export WALLET_WEB_FILENAME
    - WALLET_WEB_SHA256=$(cat wallet_core/mock_relying_party/hashes/wallet_web_sha256.txt)
    - export WALLET_WEB_SHA256
    - envsubst < deploy/kubernetes/mrp-verification-server-deployment.yaml | kubectl apply -f -
    - envsubst < deploy/kubernetes/mrp-verification-server-ingress.yaml | kubectl apply -f -
    - kubectl apply -f deploy/kubernetes/mrp-verification-server-service.yaml
    - kubectl apply -f deploy/kubernetes/mrp-verification-server-network-policies.yaml
    - kubectl rollout status deployment/mrp-verification-server
    - envsubst < deploy/kubernetes/mock-relying-party-deployment.yaml | kubectl apply -f -
    - CSP_SCRIPT_SRC_MRP=$(cat wallet_core/mock_relying_party/hashes/csp_script_src_mrp_base64.txt | base64 -d)
    - export CSP_SCRIPT_SRC_MRP
    - CSP_STYLE_SRC_MRP="$(cat wallet_core/mock_relying_party/hashes/csp_style_src_mrp_base64.txt | base64 -d)"
    - export CSP_STYLE_SRC_MRP
    - envsubst < deploy/kubernetes/mock-relying-party-ingress.yaml | kubectl apply -f -
    - kubectl apply -f deploy/kubernetes/mock-relying-party-service.yaml
    - kubectl rollout status deployment/mock-relying-party

deploy-mock-relying-party-ont:
  extends: [.env-ont-k8s, .deploy-mock-relying-party]
  rules: !reference [.default-or-merge-request, rules]
  needs:
    - !reference [.deploy-mock-relying-party, needs]
    - job: run-mrp-vs-migrations-ont
      artifacts: false
  variables:
    MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME: $MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME_ONT
    MRP_VERIFICATION_SERVER_INTERNAL_HOSTNAME: $MRP_VERIFICATION_SERVER_INTERNAL_HOSTNAME_ONT
    MRP_VERIFICATION_SERVER_EXTERNAL_HOSTNAME: $MRP_VERIFICATION_SERVER_EXTERNAL_HOSTNAME_ONT
    DIGID_CONNECTOR_EXTERNAL_HOSTNAME: $DIGID_CONNECTOR_EXTERNAL_HOSTNAME_ONT
    UL_HOSTNAME: $APP_EXTERNAL_HOSTNAME_ONT
    SENTRY_DSN: "${SENTRY_DSN_ONT}"
    SENTRY_ENVIRONMENT: "ont"

deploy-mock-relying-party-demo:
  extends: [.env-demo-k8s, .deploy-mock-relying-party]
  needs:
    - !reference [.deploy-mock-relying-party, needs]
    - job: run-mrp-vs-migrations-demo
      artifacts: false
  rules: !reference [.release-tag, rules]
  variables:
    MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME: $MOCK_RELYING_PARTY_EXTERNAL_HOSTNAME_DEMO
    MRP_VERIFICATION_SERVER_INTERNAL_HOSTNAME: $MRP_VERIFICATION_SERVER_INTERNAL_HOSTNAME_DEMO
    MRP_VERIFICATION_SERVER_EXTERNAL_HOSTNAME: $MRP_VERIFICATION_SERVER_EXTERNAL_HOSTNAME_DEMO
    DIGID_CONNECTOR_EXTERNAL_HOSTNAME: $DIGID_CONNECTOR_EXTERNAL_HOSTNAME_DEMO
    UL_HOSTNAME: $APP_EXTERNAL_HOSTNAME_DEMO
    SENTRY_DSN: "${SENTRY_DSN_DEMO}"
    SENTRY_ENVIRONMENT: "demo"

.run-pi-migrations:
  needs:
    - job: build-ws-migrations-image
      artifacts: false
  variables:
    PID_ISSUER_MIGRATION_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-server-migrations:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < deploy/kubernetes/pid-issuer-migration-job.yaml | kubectl apply -f -
    - kubectl wait --for=condition=complete --timeout=300s job -l app=pid-issuer-migrations

run-pi-migrations-ont:
  extends: [.env-ont-k8s, .run-pi-migrations]
  rules: !reference [.default-or-merge-request, rules]

run-pi-migrations-demo:
  extends: [.env-demo-k8s, .run-pi-migrations]
  rules: !reference [.release-tag, rules]

.deploy-pid-issuer:
  needs:
    - job: build-pid-issuer-image
      artifacts: false
  variables:
    PID_ISSUER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-pid-issuer:${CI_COMMIT_SHORT_SHA}
  script:
    - envsubst < deploy/kubernetes/pid-issuer-deployment.yaml | kubectl apply -f -
    - envsubst < deploy/kubernetes/pid-issuer-ingress.yaml | kubectl apply -f -
    - kubectl apply -f deploy/kubernetes/pid-issuer-service.yaml
    - kubectl apply -f deploy/kubernetes/pid-issuer-network-policies.yaml
    - kubectl rollout status deployment/pid-issuer

deploy-pid-issuer-ont:
  extends: [.env-ont-k8s, .deploy-pid-issuer]
  rules: !reference [.default-or-merge-request, rules]
  needs:
    - !reference [.deploy-pid-issuer, needs]
    - job: run-pi-migrations-ont
      artifacts: false
  variables:
    DIGID_CONNECTOR_EXTERNAL_HOSTNAME: $DIGID_CONNECTOR_EXTERNAL_HOSTNAME_ONT
    PID_ISSUER_EXTERNAL_HOSTNAME: $PID_ISSUER_EXTERNAL_HOSTNAME_ONT
    PID_ISSUER_INTERNAL_HOSTNAME: $PID_ISSUER_INTERNAL_HOSTNAME_ONT
    UL_HOSTNAME: $APP_EXTERNAL_HOSTNAME_ONT
    SENTRY_DSN: "${SENTRY_DSN_ONT}"
    SENTRY_ENVIRONMENT: "ont"

deploy-pid-issuer-demo:
  extends: [.env-demo-k8s, .deploy-pid-issuer]
  needs:
    - !reference [.deploy-pid-issuer, needs]
    - job: run-pi-migrations-demo
      artifacts: false
  rules: !reference [.release-tag, rules]
  variables:
    DIGID_CONNECTOR_EXTERNAL_HOSTNAME: $DIGID_CONNECTOR_EXTERNAL_HOSTNAME_DEMO
    PID_ISSUER_EXTERNAL_HOSTNAME: $PID_ISSUER_EXTERNAL_HOSTNAME_DEMO
    PID_ISSUER_INTERNAL_HOSTNAME: $PID_ISSUER_INTERNAL_HOSTNAME_DEMO
    UL_HOSTNAME: $APP_EXTERNAL_HOSTNAME_DEMO
    SENTRY_DSN: "${SENTRY_DSN_DEMO}"
    SENTRY_ENVIRONMENT: "demo"

.deploy-gba-hc-converter:
  needs:
    - job: build-gba-hc-converter-image
      artifacts: false
  variables:
    CONVERTER_IMAGE: ${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-gba-hc-converter:${CI_COMMIT_SHORT_SHA}
  script:
    - kubectl create configmap nl-wallet-gba-hc-converter-xml-files --dry-run=client --from-file wallet_core/gba_hc_converter/resources/gba-v-responses -o yaml | kubectl apply -f -
    - kubectl create configmap nl-wallet-gba-hc-converter-zoek-xml --dry-run=client --from-file wallet_core/gba_hc_converter/resources/remote/bsn_zoeken_template.xml -o yaml | kubectl apply -f -
    - envsubst < deploy/kubernetes/${ENV}/gba-hc-converter-deployment.yaml | kubectl apply -f -
    - kubectl apply -f deploy/kubernetes/gba-hc-converter-network-policies.yaml
    - kubectl apply -f deploy/kubernetes/gba-hc-converter-service.yaml
    - kubectl rollout status deployment/gba-hc-converter

deploy-gba-hc-converter-ont:
  extends: [.env-ont-k8s, .deploy-gba-hc-converter]
  rules: !reference [.default-or-merge-request, rules]
  variables:
    ENV: ont

deploy-gba-hc-converter-demo:
  extends: [.env-demo-k8s, .deploy-gba-hc-converter]
  rules: !reference [.release-tag, rules]
  variables:
    ENV: demo

run-preload-gba-v-job:
  extends: .env-demo-k8s
  rules: !reference [.release-tag, rules]
  when: manual
  script:
    - kubectl create configmap nl-wallet-gba-hc-converter-preload-script --dry-run=client --from-file wallet_core/gba_hc_converter/resources/remote/preload.sh -o yaml | kubectl apply -f -
    - kubectl create configmap nl-wallet-gba-hc-converter-zoek-xml --dry-run=client --from-file wallet_core/gba_hc_converter/resources/remote/bsn_zoeken_template.xml -o yaml | kubectl apply -f -
    - envsubst < deploy/kubernetes/preload-gba-v-data-job.yaml | kubectl apply -f -
    - kubectl wait --for=condition=complete --timeout=300s job -l app=/preload-gba-v-data

check-gitlab-ci-changed:
  rules:
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
      allow_failure: true # Only meant as a warning as it's not a critical failure
  script:
    - git fetch origin
    # fails if .gitlab-ci.yml is different on CI_DEFAULT_BRANCH
    - git diff --exit-code origin/$CI_DEFAULT_BRANCH -- .gitlab-ci.yml

.run-automation-tests-common-setup:
  resource_group: automation-tests
  extends: .env-ont-k8s
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-jdk11@sha256:1b0d6c2f6fe1e66d5f72e3d76648c973c9d0c0fa1bf57c3d94da30f6e8c97414"
  artifacts:
    when: always
    paths:
      - uiautomation/build/test-results
      - uiautomation/build/reports
  before_script:
    - BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_USER
    - BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - export BROWSERSTACK_KEY
    - set -euxo pipefail
    - java -version
    - git fetch origin
    - git checkout $CI_DEFAULT_BRANCH
    - cd uiautomation

.run-automation-tests:
  extends: .run-automation-tests-common-setup
  script:
    - gradle wrapper --gradle-version=7.5
    - ./gradlew --info --stacktrace test
      --tests $TESTS
      -Dtest.config.app.identifier="$APP_IDENTIFIER"
      -Dtest.config.device.name="$DEVICE_NAME"
      -Dtest.config.platform.name="$PLATFORM_NAME"
      -Dtest.config.platform.version="$PLATFORM_VERSION"
      -Dtest.config.remote=true
      -Dfile.encoding=UTF-8
  allow_failure: true # Allow failure as only the test results of succeeding pipelines are read into Quality Time.

run-automation-tests-14-part-1:
  extends: .run-automation-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: manual
  variables:
    APP_IDENTIFIER: "nl.ictu.edi.wallet.latest"
    DEVICE_NAME: "Google Pixel 8"
    PLATFORM_NAME: "Android"
    PLATFORM_VERSION: "14.0"
    TESTS: "suite.AppStartToDashboardTestSuite"

run-automation-tests-14-part-2:
  extends: .run-automation-tests
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: manual
  needs:
    - job: run-automation-tests-14-part-1
      artifacts: false
  variables:
    APP_IDENTIFIER: "nl.ictu.edi.wallet.latest"
    DEVICE_NAME: "Google Pixel 8"
    PLATFORM_NAME: "Android"
    PLATFORM_VERSION: "14.0"
    TESTS: "suite.DashboardAndBeyondTestSuite"

run-automation-smoke-test-ont:
  extends: .run-automation-tests-common-setup
  rules: !reference [.default-branch, rules]
  needs:
    - job: upload-browserstack-android-app-ont
      artifacts: false
    - job: deploy-mock-relying-party-ont
      artifacts: false
    - job: deploy-wallet-provider-ont
      artifacts: false
  script:
    - gradle wrapper --gradle-version=7.5
    - ./gradlew --info --stacktrace smokeTest
      -Dtest.config.app.identifier="nl.ictu.edi.wallet.latest"
      -Dtest.config.device.name="Google Pixel 8"
      -Dtest.config.platform.name="Android"
      -Dtest.config.platform.version="14.0"
      -Dtest.config.remote=true
      -Dfile.encoding=UTF-8
  allow_failure: true # Only meant as a warning indicator.

build-sbom:
  rules: !reference [.default-branch, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-cyclonedx@sha256:8392c65dad8e88a9afee8901990405b22691608f5394b8603f6cddc900fe3004"
  script:
    ## Rust
    - cargo cyclonedx --manifest-path wallet_core/Cargo.toml --format json
    - cargo cyclonedx --manifest-path wallet_core/flutter_rust_bridge_codegen/Cargo.toml --format json
    - cargo cyclonedx --manifest-path wallet_core/uniffi-bindgen/Cargo.toml --format json
    ## Flutter
    - cd wallet_app; cdxgen --type dart --output bom.json; cd -
    ## iOS
    # does not support json, so converting to it (we need it to be able to merge)
    - bundle install
    - cd wallet_app
    - flutter pub get --enforce-lockfile
    - flutter precache --ios
    - cd ios
    - bundle exec pod install --allow-root
    - cyclonedx-cocoapods
    - cyclonedx convert --input-file bom.xml --output-file bom.json
    - cd ../..
    ## Android
    - cd wallet_app/android/app; cdxgen -t gradle -o bom.json; cd -
    - cd wallet_core/platform_support/android/platform_support; cdxgen -t gradle -o bom.json; cd -
    # merge sboms into one (this doesn't work when using XML, because the cdxgen bom.xml is invalid)
    - cyclonedx merge --input-files `find . -name bom.json` --output-file bom.json
    # converting it to xml does work
    - cyclonedx convert --input-file bom.json --output-file bom.xml
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
  artifacts:
    when: always
    paths:
      - ./bom.xml
      - ./bom.json
