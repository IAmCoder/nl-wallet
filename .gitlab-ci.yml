variables:
  FLUTTER_APP_PROJECT_DIR: "wallet_app"
  RENEW_ON_LETSENCRYPT_STAGING:
    value: "false"
    description: "Try to renew the wallet_provider server certificate from the Let's encrypt staging environment."
  RENEW_ON_LETSENCRYPT_LIVE:
    value: "false"
    description: "Try to renew the wallet_provider server certificate from the Let's encrypt live environment."

stages:
  - test
  - build
  - deploy

.docker-sp:
  environment:
    name: ${K8S_CLUSTER}
    action: prepare

.env-sp:
  environment:
    action: prepare
    name: ${K8S_CLUSTER}
    kubernetes:
      namespace: ${K8S_NAMESPACE}

.deploy-sp:
  extends: .env-sp
  dependencies: [ ]
  image: $HARBOR_REGISTRY/$DOCKER_HUB_PROXY/bitnami/kubectl@sha256:ebace7799e1fcf6abc4080c7026d1c549310b2d4c6a37a1937773d5fd9d559b7 # 1.23.15
  resource_group: testcluster
  environment:
    action: start

.kaniko:
  extends: .docker-sp
  before_script:
    - echo $DOCKER_AUTH_CONFIG > /kaniko/.docker/config.json
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [ "" ]

.default-sonar:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "$HARBOR_REGISTRY/$DOCKER_HUB_PROXY/sonarsource/sonar-scanner-cli@sha256:4ec8e00440c58ce4c898bea35439a0542b2ce7767fe207cf0935a553ab4c90db" # 4.8.0

.default-branch:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.default-or-release:
  rules:
    - !reference [ .default-branch, rules ]
    - if: $CI_COMMIT_BRANCH =~ /^(alpha|beta|release)\/\d+\.\d+\.\d+$/

.default-or-release-or-merge-request:
  rules:
    - !reference [ .default-or-release, rules ]
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# Working directory is 'wallet_app' directory
test-flutter:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter@sha256:f62679500df3aa1652766a1a0608252736b5180a48fa56ccbbe421be15bf8e98"
  script:
    - set -euxo pipefail
    - flutter --version
    - flutter pub get --directory $FLUTTER_APP_PROJECT_DIR
    - flutter analyze $FLUTTER_APP_PROJECT_DIR
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --exclude-tags=golden --coverage)
  artifacts:
    paths:
      - $FLUTTER_APP_PROJECT_DIR/coverage/lcov.info

test-flutter-ui:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  when: manual
  tags:
    - macos
  artifacts:
    name: "ui-test-failures"
    when: on_failure
    paths:
      - "**/failures/*.png"
  script:
    - set -euxo pipefail
    - flutter --version
    - (cd $FLUTTER_APP_PROJECT_DIR; flutter test --tags=golden)

test-rust:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:534ca807364ac75d02d348f33faa9f1455f9ba7a48af52790811d717b57be001"
  script:
    - set -euxo pipefail
    # Check Rust formatting
    - find wallet_core -mindepth 2 -type f -name Cargo.toml -print0 | xargs -0 -n1 cargo fmt --manifest-path
    - git diff
    - if [ $(git diff --shortstat | wc -l) -gt 0 ]; then echo "Rust formatting results in different files!"; exit 1; fi
    # Check clippy
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    - grep ^exclude wallet_core/Cargo.toml | grep -oP '".*?"' | tr -d '"' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings    
    # Run tests, generate code coverage reports
    - (cd wallet_core; cargo llvm-cov test --locked --lcov --output-path lcov.info)
    - (cd wallet_core; cargo llvm-cov report --locked --cobertura --output-path coverage.xml)
  artifacts:
    reports:
      coverage_report:
        path: wallet_core/coverage.xml
        coverage_format: cobertura
    paths:
      - wallet_core/lcov.info

test-rust-compilation-android-linux:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:91c89ddae9a826d2c16a2a7b768e5b17577ea2518f661fa677311d3fe7680f20"
  script:
    - cargo check --manifest-path wallet_core/wallet_provider/Cargo.toml --locked --release
    - (cd wallet_core; cargo ndk --target arm64-v8a check --locked --release)

test-rust-compilation-ios:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  when: manual
  tags:
    - macos
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --target aarch64-apple-ios --release

test-ios:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  when: manual
  tags:
    - macos
  artifacts:
    name: "test_output"
    when: on_failure
    paths:
      - "**/fastlane/test_output/*"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane ios test

dependency-check:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "$HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-app-builder-dependency-check@sha256:88a6ff08245ccee24e4625fc19533985ebc745223a600e193b5e9b0c946f2c8b"
  before_script:
    - mkdir -p $CI_PROJECT_DIR/dependency_check_data
  script:
    - dependency-check.sh
      --enableExperimental
      --scan "."
      --format "HTML" --format "JSON" --format "XML"
      --data $CI_PROJECT_DIR/dependency_check_data
  artifacts:
    when: always
    paths:
      - dependency-check-report.json
      - dependency-check-report.html
      - dependency-check-report.xml
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - $CI_PROJECT_DIR/dependency_check_data

dependency-check-rust:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:534ca807364ac75d02d348f33faa9f1455f9ba7a48af52790811d717b57be001"
  before_script:
    - mkdir $CI_PROJECT_DIR/dependency_check_data
  script:
    # todo: perhaps in the future we may want a warning or even failure in case of found vulnerabilities.
    - cargo audit --file wallet_core/Cargo.lock --json > audit.json || true
  artifacts:
    when: always
    paths:
      - audit.json

sonar-rust:
  extends: .default-sonar
  needs:
    - job: test-rust
      artifacts: true
  before_script:
    - cd wallet_core
  script:
    - sonar-scanner
      -Dsonar.projectKey=nl-wallet-demo-app-rust
      -Dsonar.exclusions="target/**,platform_support/android/**,platform_support/ios/**"

sonar-flutter:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  needs:
    - job: test-flutter
      artifacts: true
    - job: dependency-check
      artifacts: true
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-sonar-flutter@sha256:c70d355ac8b873e55242dc01892f1c65fee9ace3728351fe3f9e49fb694cfb31"
  before_script:
    - cd $FLUTTER_APP_PROJECT_DIR
  script:
    - sonar-scanner
      -Dsonar.projectKey=nl-wallet-demo-app
      -Dsonar.exclusions="android/**,ios/**"
      -Dsonar.dependencyCheck.htmlReportPath=../dependency-check-report.html
      -Dsonar.dependencyCheck.jsonReportPath=../dependency-check-report.json

sonar-ios:
  extends: .default-sonar
  before_script:
    - cd wallet_core/platform_support/ios
  script:
    - sonar-scanner
      -Dsonar.projectKey=nl-wallet-demo-app-platform-support-ios
      -Dsonar.exclusions="*Tests*/**"
      -Dsonar.c.file.suffixes=-
      -Dsonar.cpp.file.suffixes=-
      -Dsonar.objc.file.suffixes=-

sonar-android:
  extends: .default-sonar
  before_script:
    - cd wallet_core/platform_support/android
  script:
    - sonar-scanner
      -Dsonar.projectKey=nl-wallet-demo-app-platform-support-android
      -Dsonar.exclusions="platform_support/build/**,platform_support/src/androidTest/**"
      -Dsonar.findbugs.allowuncompiledcode=true

test-codegen:
  stage: test
  rules: !reference [ .default-or-release-or-merge-request, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-flutter-rust@sha256:b6333c8db6c2cf94ea3a2b74b6716a6ba1a467aa8e5713f1d6602125f693ecd4"
  script:
    - set -euxo pipefail
    - flutter pub get --directory $FLUTTER_APP_PROJECT_DIR
    - cargo run --manifest-path wallet_core/flutter_rust_bridge_codegen/Cargo.toml --locked
    - (cd $FLUTTER_APP_PROJECT_DIR && flutter pub run build_runner build --delete-conflicting-outputs)
    - git diff
    - if [ $(git diff --shortstat | wc -l) -gt 0 ]; then echo "Code generation results in different files!"; exit 1; fi

build-wp-image:
  extends: .kaniko
  stage: build
  rules: !reference [ .default-or-release, rules ]
  script:
    - /kaniko/executor
      --context wallet_core
      --build-arg HARBOR_REGISTRY=$HARBOR_REGISTRY
      --build-arg HARBOR_NLW_PROJECT=$HARBOR_NLW_PROJECT
      --destination $HARBOR_REGISTRY/$HARBOR_NLW_PROJECT/nl-wallet-provider:$CI_COMMIT_SHORT_SHA
      --cache=true

build-android-app:
  extends: .env-sp
  stage: build
  rules: !reference [ .default-or-release, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:04a677d44f6a98150fe3f6cfdb915864ec3c8f56632c89acfa5a17ff9c6428fc"
  artifacts:
    name: "wallet-android"
    paths:
      - "*.aab"
      - "*.apk"
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane android ci_build

deploy-android-app:
  extends: .env-sp
  stage: deploy
  rules: !reference [ .default-or-release, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  needs:
    - job: build-android-app
      artifacts: true
  dependencies:
    - build-android-app
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane android ci_deploy

upload-browserstack-android-app:
  extends: .env-sp
  stage: deploy
  rules: !reference [ .default-branch, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  needs:
    - job: build-android-app
      artifacts: true
  dependencies:
    - build-android-app
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane android ci_browserstack

build-ios-app:
  extends: .env-sp
  stage: build
  rules: !reference [ .default-or-release, rules ]
  when: manual
  tags:
    - macos
  artifacts:
    name: "wallet-ios"
    paths:
      - "*.ipa"
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane ios ci_build

deploy-ios-app:
  extends: .env-sp
  stage: deploy
  rules: !reference [ .default-or-release, rules ]
  needs:
    - job: build-ios-app
      artifacts: true
  dependencies:
    - build-ios-app
  tags:
    - macos
  variables:
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane disable_flutter_analytics
    - bundle exec fastlane ios ci_deploy

upload-browserstack-ios-app:
  extends: .env-sp
  stage: deploy
  rules: !reference [ .default-branch, rules ]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-ruby@sha256:72cb1ff2a511f4eb1c29a7feed1470444997d243e3b613222495100b152a4200"
  needs:
    - job: build-ios-app
      artifacts: true
  dependencies:
    - build-ios-app
  variables:
    LC_ALL: "C.UTF-8"
    LANG: "C.UTF-8"
    FASTLANE_OPT_OUT_USAGE: "YES"
  script:
    - bundle install
    - bundle exec fastlane ios ci_browserstack

deploy-wallet-provider:
  extends: .deploy-sp
  stage: deploy
  rules: !reference [ .default-branch, rules ]
  when: manual
  needs:
    - build-wp-image
  script:
    - cat kubernetes/servicemonitors.yaml
      | sed "s;{{K8S_NAMESPACE}};${K8S_NAMESPACE};g"
      | kubectl apply -f -
    - cat kubernetes/wallet-provider-configmap.yaml | kubectl apply -f -
    - cat kubernetes/wallet-provider-deployment.yaml
      | sed "s;{{WALLET_PROVIDER_IMAGE}};${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-provider:${CI_COMMIT_SHORT_SHA};g"
      | kubectl apply -f -
    - cat kubernetes/wallet-provider-ingress.yaml
      | sed "s;{{INTERNAL_HOSTNAME}};${WALLET_PROVIDER_INTERNAL_HOSTNAME};g"
      | sed "s;{{EXTERNAL_HOSTNAME}};${WALLET_PROVIDER_EXTERNAL_HOSTNAME};g"
      | sed "s;{{EXTERNAL_CONTEXT_PATH}};${WALLET_PROVIDER_EXTERNAL_CONTEXT_PATH};g"
      | kubectl apply -f -
    - cat kubernetes/wallet-provider-service.yaml | kubectl apply -f -
    - kubectl rollout status deployment/wallet-provider

deploy-wallet-provider-staging-cert:
  extends: .deploy-sp
  stage: deploy
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_PIPELINE_SOURCE == "schedule") && $RENEW_ON_LETSENCRYPT_STAGING == "true"
  script:
    - cat kubernetes/stage/cert.yaml | sed "s;{{EXTERNAL_HOSTNAME}};${WALLET_PROVIDER_EXTERNAL_HOSTNAME};g" | kubectl apply -f -
    - kubectl wait --for condition="ready" --timeout=180s -f kubernetes/stage/cert.yaml

deploy-wallet-provider-live-cert:
  extends: .deploy-sp
  stage: deploy
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $RENEW_ON_LETSENCRYPT_LIVE == "true"
  script:
    - cat kubernetes/live/cert.yaml | sed "s;{{EXTERNAL_HOSTNAME}};${WALLET_PROVIDER_EXTERNAL_HOSTNAME};g" | kubectl apply -f -
    - kubectl wait --for condition="ready" --timeout=180s -f kubernetes/live/cert.yaml

run-automation-tests:
  extends: .env-sp
  stage: test
  rules:
    - if: $RUN_AUTOMATION_TESTS == "true" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual
      allow_failure: true
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-jdk11@sha256:4a8908ea8ef4d5ed3f0a4d862598e4b782de8dc588cb60d433c84f3d87563675"
  artifacts:
    when: always
    paths:
      - uiautomation/build/test-results
      - uiautomation/build/reports
  script:
    - export BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - set -euxo pipefail
    - java -version
    - cd uiautomation
    - gradle wrapper --gradle-version=7.3.3
    - ./gradlew --debug --stacktrace test --tests suite.RunTests
