.rust-cache:
  cache:
    key: rust-${CI_JOB_NAME_SLUG}-${CI_DEFAULT_BRANCH}
    paths:
      - ".cargo/git"
      - ".cargo/registry/index"
      - ".cargo/registry/cache"
      - "wallet_core/target/"
      - "wallet_core/flutter_rust_bridge_codegen/target"
      - "wallet_core/uniffi-bindgen/target"
    policy: ${CACHE_POLICY}

lint-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:32725b6bf4530f6b688827fb48ab086f0429ffd50a02ec40a202be97c47ebb8b"
  cache: !reference [.rust-cache, cache]
  script:
    - set -euxo pipefail
    # Check Rust formatting
    - find wallet_core -mindepth 2 -type f -name Cargo.toml -print0 | xargs -0 -n1 -I {} cargo fmt --manifest-path {} -- --check
    # Check clippy
    - cargo clippy --manifest-path wallet_core/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings
    - grep ^exclude wallet_core/Cargo.toml | grep -oP '".*?"' | tr -d '"' | xargs -I "{}" cargo clippy --manifest-path wallet_core/{}/Cargo.toml --locked --all-features --all-targets --tests -- -Dwarnings

test-rust:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:32725b6bf4530f6b688827fb48ab086f0429ffd50a02ec40a202be97c47ebb8b"
  cache: !reference [.rust-cache, cache]
  variables:
    SKIP_DIGID_CONNECTOR: "true"
    SKIP_WALLET_WEB: "true"
    SKIP_MOCK_RELYING_PARTY: "true"
    WALLET_PROVIDER_DATABASE__HOST: "postgres"
    WALLET_SERVER_STORE_URL: "postgres://postgres:postgres@postgres:5432/verification_server"
  services:
    - name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-postgres@sha256:8260dcdfd90b550c80d8a2e5527c0efb2280b371ab34c28f713f770a749c49dc"
      alias: postgres
      variables:
        POSTGRES_USER: "postgres"
        POSTGRES_PASSWORD: "postgres"
        POSTGRES_INITDB_ARGS: "--encoding=UTF8"
        POSTGRES_MULTIPLE_DATABASES: "wallet_provider,verification_server"
  before_script:
    - set -euxo pipefail
    - ./scripts/setup-devenv.sh
    - cd wallet_core
  script:
    - cargo run --bin wallet_provider_migrations --locked -- up
    - DATABASE_URL="${WALLET_SERVER_STORE_URL}" cargo run --bin wallet_server_migration --locked -- up
    - cargo llvm-cov test --features integration_test --locked --lcov --output-path lcov.info
    - cargo llvm-cov report --locked --cobertura --output-path rust-coverage.xml
  artifacts:
    reports:
      coverage_report:
        path: wallet_core/rust-coverage.xml
        coverage_format: cobertura
    paths:
      - wallet_core/lcov.info

.test-rust-compilation:
  rules: !reference [.default-or-release-or-merge-request, rules]
  variables:
    RUSTFLAGS: "-D warnings"

test-rust-compilation-android-linux:
  extends: .test-rust-compilation
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-android-flutter-rust@sha256:3fadff30c42b92943320856d0bb2edeacecda75a9aa71eb7f29a550918edf887"
  script:
    - (cd wallet_core; cargo ndk --target arm64-v8a check --package flutter_api --locked --release)

test-rust-compilation-ios:
  extends: .test-rust-compilation
  tags:
    - macos
  image: sonoma-wallet:0.1.1
  script:
    - cargo check --manifest-path wallet_core/Cargo.toml --locked --release --package flutter_api --target aarch64-apple-ios

.build-binary:
  rules: !reference [.default-or-release-or-merge-request, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:32725b6bf4530f6b688827fb48ab086f0429ffd50a02ec40a202be97c47ebb8b"
  cache: !reference [.rust-cache, cache]
  needs:
    - job: test-rust
      artifacts: false
  variables:
    RUSTFLAGS: "-D warnings"
  before_script:
    - set -euxo pipefail
    - cd wallet_core

test-configuration-server-compilation:
  extends: .build-binary
  script:
    - cargo check --locked --release --package configuration_server --bin configuration_server

build-wallet-provider-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "wallet_provider" --bin wallet_provider
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_provider" --bin wallet_provider
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/wallet_provider
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_provider

build-wallet-provider-migrations-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_provider_migrations" --bin wallet_provider_migrations
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_provider_migrations

build-pid-issuer-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package wallet_server --bin pid_issuer --no-default-features --features postgres,issuance
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package wallet_server --bin pid_issuer --no-default-features --features postgres,issuance
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/pid_issuer
      - wallet_core/target/x86_64-unknown-linux-musl/release/pid_issuer

build-verification-server-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package wallet_server --bin verification_server --no-default-features --features postgres,disclosure
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package wallet_server --bin verification_server --no-default-features --features postgres,disclosure
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/verification_server
      - wallet_core/target/x86_64-unknown-linux-musl/release/verification_server

build-wallet-server-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package wallet_server --bin wallet_server --no-default-features --features postgres,issuance,disclosure
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package wallet_server --bin wallet_server --no-default-features --features postgres,issuance,disclosure
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/wallet_server
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_server

build-wallet-server-migrations-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "wallet_server_migration" --bin wallet_server_migration
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-musl/release/wallet_server_migration

build-demo-relying-party-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "mock_relying_party" --bin mock_relying_party
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "mock_relying_party" --bin mock_relying_party
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/mock_relying_party
      - wallet_core/target/x86_64-unknown-linux-musl/release/mock_relying_party

build-gba-hc-converter-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --release --package "gba_hc_converter" --bin gba_hc_converter
    - cargo build --locked --target x86_64-unknown-linux-musl --release --package "gba_hc_converter" --bin gba_hc_converter
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/release/gba_hc_converter
      - wallet_core/target/x86_64-unknown-linux-musl/release/gba_hc_converter

build-gba-fetch-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --package "gba_hc_converter" --bin gba_fetch
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/debug/gba_fetch

build-gba-encrypt-binary:
  extends: .build-binary
  script:
    - cargo build --locked --target x86_64-unknown-linux-gnu --package "gba_hc_converter" --bin gba_encrypt
  artifacts:
    paths:
      - wallet_core/target/x86_64-unknown-linux-gnu/debug/gba_encrypt
