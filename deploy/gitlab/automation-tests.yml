.run-automation-tests-common-setup:
  resource_group: automation-tests
  extends: .env-ont-k8s
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-jdk17@sha256:ffafb8a480a9eb2a6d12c4f3649848a9bd03547cc5b9a8105757e018d2f32c87"
  artifacts:
    when: always
    paths:
      - uiautomation/build/test-results
      - uiautomation/build/reports
  before_script:
    - BROWSERSTACK_USER=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.user}' | base64 --decode)
    - export BROWSERSTACK_USER
    - BROWSERSTACK_KEY=$(kubectl get secret nl-wallet-browserstack -o jsonpath='{.data.key}' | base64 --decode)
    - export BROWSERSTACK_KEY
    - set -euxo pipefail
    - java -version
    - git fetch origin
    - git checkout $CI_DEFAULT_BRANCH
    - cd uiautomation

.run-automation-tests:
  extends: .run-automation-tests-common-setup
  script:
    - gradle wrapper --gradle-version=8.12
    - ./gradlew --info --stacktrace test
      --tests $TESTS
      -Dtest.config.app.identifier="$APP_IDENTIFIER"
      -Dtest.config.device.name="$DEVICE_NAME"
      -Dtest.config.platform.name="$PLATFORM_NAME"
      -Dtest.config.platform.version="$PLATFORM_VERSION"
      -Dtest.config.remote=true
      -Dfile.encoding=UTF-8
  allow_failure: true # Allow failure as only the test results of succeeding pipelines are read into Quality Time.

.run-automation-tests-default-rules: &run-automation-tests-default-rules
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" && $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: manual

.run-automation-tests-default-variables: &run-automation-tests-default-variables
  variables:
    APP_IDENTIFIER: "nl.ictu.edi.wallet.latest"
    DEVICE_NAME: "Google Pixel 8"
    PLATFORM_NAME: "Android"
    PLATFORM_VERSION: "14.0"

.run-automation-tests-default:
  extends: .run-automation-tests
  <<: *run-automation-tests-default-rules
  <<: *run-automation-tests-default-variables

run-automation-tests-suite-appstart:
  extends: .run-automation-tests-default
  variables: { TESTS: "suite.AppStartTestSuite" }

run-automation-tests-suite-introduction:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-appstart }]
  variables: { TESTS: "suite.IntroductionTestSuite" }

run-automation-tests-suite-security:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-introduction }]
  variables: { TESTS: "suite.SecurityTestSuite" }

run-automation-tests-suite-confirm:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-security }]
  variables: { TESTS: "suite.ConfirmTestSuite" }

run-automation-tests-suite-personalize:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-confirm }]
  variables: { TESTS: "suite.PersonalizeTestSuite" }

run-automation-tests-suite-dashboard:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-personalize }]
  variables: { TESTS: "suite.DashboardTestSuite" }

run-automation-tests-suite-card:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-dashboard }]
  variables: { TESTS: "suite.CardTestSuite" }

run-automation-tests-suite-menu:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-card }]
  variables: { TESTS: "suite.MenuTestSuite" }

run-automation-tests-suite-history:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-menu }]
  variables: { TESTS: "suite.HistoryTestSuite" }

run-automation-tests-suite-settings:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-history }]
  variables: { TESTS: "suite.SettingsTestSuite" }

run-automation-tests-suite-lock:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-settings }]
  variables: { TESTS: "suite.LockTestSuite" }

run-automation-tests-suite-web:
  extends: .run-automation-tests-default
  needs: [{ job: run-automation-tests-suite-lock }]
  variables: { TESTS: "suite.WebTestSuite" }

run-automation-smoke-test-ont:
  extends: .run-automation-tests-common-setup
  rules: !reference [.default-branch, rules]
  needs:
    - job: upload-browserstack-android-app-ont
      artifacts: false
    - job: deploy-mock-relying-party-ont
      artifacts: false
    - job: deploy-wallet-provider-ont
      artifacts: false
  script:
    - gradle wrapper --gradle-version=8.12
    - ./gradlew --info --stacktrace smokeTest
      -Dtest.config.app.identifier="nl.ictu.edi.wallet.latest"
      -Dtest.config.device.name="Google Pixel 8"
      -Dtest.config.platform.name="Android"
      -Dtest.config.platform.version="14.0"
      -Dtest.config.remote=true
      -Dfile.encoding=UTF-8
  allow_failure: true # Only meant as a warning indicator.

run-performance-test-ont:
  rules: !reference [.default-branch, rules]
  image:
    name: "${HARBOR_REGISTRY}/${HARBOR_NLW_PROJECT}/nl-wallet-app-builder-rust@sha256:f636c5d9d8ac790a0b254fcf0e85bb7b21745194807da70704e507706e64807c"
  extends: .env-ont-k8s
  needs:
    - job: deploy-mock-relying-party-ont
      artifacts: false
    - job: deploy-wallet-provider-ont
      artifacts: false
    - job: deploy-pid-issuer-ont
      artifacts: false
    - job: wallet-config-ont
      artifacts: true
  variables:
    CONFIG_ENV: ont
    UNIVERSAL_LINK_BASE: "https://$APP_EXTERNAL_HOSTNAME_ONT/deeplink/"
    RELYING_PARTY_URL: "https://${EXTERNAL_HOSTNAME_ONT}/${MOCK_RELYING_PARTY_EXTERNAL_CONTEXT_PATH}/"
    PUBLIC_WALLET_SERVER_URL: "https://${EXTERNAL_HOSTNAME_ONT}/${MRP_VERIFICATION_SERVER_EXTERNAL_CONTEXT_PATH}/"
    INTERNAL_WALLET_SERVER_URL: "https://${MRP_VERIFICATION_SERVER_INTERNAL_HOSTNAME_ONT}/"
    APPLE_ATTESTATION_ENVIRONMENT: "production"
  script: |
    cd ./wallet_core/
    cargo build --release --bin performance_test --features performance_test,allow_insecure_url
    export PT_START_DATE=$(date -u +%s)
    bash ./tests_integration/run_performance_test.sh 100
    export PT_END_DATE=$(date -u +%s)
    export PT_DURATION=$(( PT_END_DATE - PT_START_DATE ))
    echo "Load: 100"
    echo "Duration: ${PT_DURATION} seconds"
  allow_failure: true

# Warns when '.gitlab-ci.yaml' in '$CI_DEFAULT_BRANCH' & '$AUTOMATION_TESTS_BRANCH' branch are out-of-sync
check-gitlab-ci-changed:
  rules:
    - if: $CI_COMMIT_BRANCH == $AUTOMATION_TESTS_BRANCH
      when: always
      allow_failure: true # Only meant as a warning as it's not a critical failure
  script:
    - git fetch origin
    # fails if .gitlab-ci.yml is different on CI_DEFAULT_BRANCH
    - git diff --exit-code origin/$CI_DEFAULT_BRANCH -- .gitlab-ci.yml
