# taken from previous GitHub repository
BUILD_OFFSET = 861
INTERNAL_APP_IDENTIFIER = "nl.ictu.edi.wallet"
BRANCH_IDENTIFER_MAP = { "main" => "latest" }
APP_NAME = "NL Wallet"

# opt out of analytics
opt_out_usage

# do not generate README.md
skip_docs

private_lane :get_app_identifier do
  CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
end

private_lane :get_local_version_and_build do
  Dir.chdir("..") do
    YAML.load_file("pubspec.yaml")["version"].split("+", 2)
  end
end

private_lane :ci_get_build do
  pipeline_id = ENV["CI_PIPELINE_IID"]
  UI.user_error!("No CI_PIPELINE_IID environment variable set") unless pipeline_id

  pipeline_id.to_i + BUILD_OFFSET
end

private_lane :ci_get_app_identifier_and_version do
  UI.user_error!("No app_identifier set") unless get_app_identifier

  ref_name = ENV["CI_COMMIT_REF_NAME"]
  UI.user_error!("No CI_COMMIT_REF_NAME environment variable set") unless ref_name

  release, version = ref_name.match(/([^\/]+)(?:\/(\d+\.\d+\.\d+))?$/)&.captures

  app_identifier = "#{INTERNAL_APP_IDENTIFIER}.#{BRANCH_IDENTIFER_MAP[release] || release}" unless release == "release"

  [app_identifier, version]
end

private_lane :ci_get_basic_auth do
  registry_user = ENV["CI_REGISTRY_USER"]
  UI.user_error!("No CI_REGISTRY_USER environment variable set") unless registry_user

  job_token = ENV["CI_JOB_TOKEN"]
  UI.user_error!("No CI_JOB_TOKEN environment variable set") unless job_token

  Base64.strict_encode64("#{registry_user}:#{job_token}")
end

private_lane :ci_get_k8s_secrets do |options|
  secrets = sh("kubectl", "get", "secret", options[:name], "-o" ,"jsonpath=\"{.data}\"", log: false)

  JSON.parse(secrets[1...-1]).map { |key, value| [key, Base64.strict_decode64(value)] }.to_h
end

lane :disable_flutter_analytics do 
  sh("dart", "--disable-analytics")
  sh("flutter", "config", "--no-analytics")
end

platform :android do
  desc "Build Android app from GitLab CI"
  lane :ci_build do
    build = ci_get_build
    app_identifier, version = ci_get_app_identifier_and_version

    build(package_name: app_identifier, build: build, version: version)
  end 

  desc "Build Android app without signing"
  lane :build do |options|
    package_name = options[:package_name] || get_app_identifier
    UI.user_error!("No app_identifier or package_name option set") unless package_name

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version] || local_version

    Dir.chdir("..") do
      sh("flutter", "pub", "get")
      # TODO: implement changing the app name as well, once the following bug is fixed:
      #       https://github.com/onatcipli/rename/issues/43
      sh("flutter", "pub", "run", "rename", "--target", "android", "--bundleId", package_name)
      sh("flutter", "build", "apk", "--build-number", build.to_s, "--build-name", version.to_s)
      sh("mv", "build/app/outputs/apk/release/app-release.apk", "build/app/outputs/apk/release/#{package_name}-#{version}.apk")
    end
  end
end

platform :ios do
  desc "Build iOS app from GitLab CI"
  lane :ci_build do
    build = ci_get_build
    app_identifier, version = ci_get_app_identifier_and_version
    match_basic_auth = ci_get_basic_auth

    ENV["MATCH_PASSWORD"] = ci_get_k8s_secrets(name: "nl-wallet-fastlane-match")["password"]

    build(
      bundle_id: app_identifier,
      build: build,
      version: version,
      match_basic_auth: match_basic_auth,
      keychain_password: "admin" # hardcoded for now
    )
  end

  desc "Deploy iOS app from GitLab CI"
  lane :ci_deploy do
    app_identifier, version = ci_get_app_identifier_and_version

    api_key_secrets = ci_get_k8s_secrets(name: "nl-wallet-app-store-api-key")
    api_key = app_store_connect_api_key(
      key_id: api_key_secrets["key_id"],
      issuer_id: api_key_secrets["issuer_id"],
      key_content: api_key_secrets["private_key"]
    )

    deploy(bundle_id: app_identifier)
  end

  desc "Build iOS app"
  lane :build do |options|
    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") unless bundle_id

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version] || local_version
    name_suffix = options[:name_suffix]

    Dir.chdir("..") do
      sh("flutter", "pub", "get")

      sh("flutter", "pub", "run", "rename", "--target", "ios", "--bundleId", bundle_id)
      if name_suffix
        sh("flutter", "pub", "run", "rename", "--target", "ios", "--appname", "#{APP_NAME} (#{name_suffix})")
      end

      sh("flutter", "build", "ipa", "--build-number", build.to_s, "--build-name", version.to_s, "--no-codesign")
    end

    match(
      type: "appstore",
      readonly: true,
      git_basic_authorization: options[:match_basic_auth],
      keychain_password: options[:keychain_password]
    )
    build_app(
      skip_build_archive: true,
      archive_path: "build/ios/archive/Runner.xcarchive",
      output_name: "#{bundle_id}-#{version}.ipa"
    )
  end

  desc "Deploy iOS app"
  lane :deploy do |options|
    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") unless bundle_id

    upload_to_testflight(skip_submission: true, app_identifier: bundle_id)
  end
end
