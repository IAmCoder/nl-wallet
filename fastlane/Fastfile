# taken from previous GitHub repository
BUILD_OFFSET = 861

# opt out of analytics
opt_out_usage

# do not generate README.md
skip_docs

private_lane :get_app_identifier do
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  UI.user_error!("No app_identifier set") unless app_identifier

  app_identifier
end

private_lane :get_local_version_and_build do
  Dir.chdir("..") do
    YAML.load_file("wallet_app/pubspec.yaml")["version"].split("+", 2)
  end
end

private_lane :ci_get_build do
  pipeline_id = ENV["CI_PIPELINE_IID"]
  UI.user_error!("No CI_PIPELINE_IID environment variable set") unless pipeline_id

  pipeline_id.to_i + BUILD_OFFSET
end

private_lane :ci_get_version do |options|
  ref_name = ENV["CI_COMMIT_REF_NAME"]
  UI.user_error!("No CI_COMMIT_REF_NAME environment variable set") unless ref_name

  release, version = ref_name.match(/([^\/]+)(?:\/(\d+\.\d+\.\d+))?$/)&.captures

  version
end

private_lane :ci_get_basic_auth do
  registry_user = ENV["CI_REGISTRY_USER"]
  UI.user_error!("No CI_REGISTRY_USER environment variable set") unless registry_user

  job_token = ENV["CI_JOB_TOKEN"]
  UI.user_error!("No CI_JOB_TOKEN environment variable set") unless job_token

  Base64.strict_encode64("#{registry_user}:#{job_token}")
end

private_lane :flutter_cmd do
  begin
    sh("which", "fvm")
    ["fvm", "flutter"]
  rescue
    begin
      sh("which", "flutter")
      ["flutter"]
    rescue
      UI.user_error!('Neither "fvm" nor "flutter" command found')
    end
  end
end

private_lane :get_newest_file do |options|
  Dir.chdir("..") do
    Dir.glob("*.#{options[:extension]}").max_by {|f| File.mtime(f)}
  end
end

lane :upload_to_play_store_internal_track do |options|
  package_name = options[:package_name]
  version = options[:version]
  json_key_data = options[:json_key_data]

  upload_to_play_store(
    package_name: package_name,
    track: "internal",
    json_key_data: json_key_data,
    aab: "#{package_name}-#{version}-release.aab",
    skip_upload_apk: true
  )
end

private_lane :upload_to_browserstack do |options|
  Dir.chdir("..") do
    sh("curl", "-u", "#{options[:user]}:#{options[:key]}", "-X", "POST", "https://api-cloud.browserstack.com/app-automate/upload", "-F", "file=@#{options[:file]}", "-F", "custom_id=#{options[:custom_id]}", log: false)
  end
end

lane :disable_flutter_analytics do
  sh("dart", "--disable-analytics")
  sh(*flutter_cmd, "config", "--no-analytics")
end

platform :android do
  desc "Build release and profile versions of Android app from GitLab CI"
  lane :ci_build do |options|
    build = ci_get_build
    version = ci_get_version

    options[:build] = build
    options[:version] = version

    build(options)
  end

  desc "Build and sign Android app"
  lane :build do |options|
    package_name = options[:package_name] || get_app_identifier
    UI.user_error!("No package_name option set") unless package_name

    app_name = options[:app_name]
    UI.user_error!("No app_name option set") unless app_name

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version] || local_version
    file_format = options[:file_format] || "aab"
    build_mode = options[:build_mode] || "release"
    mock = options[:mock] || false
    ul_hostname = options[:ul_hostname] || ""

    # always `true`, but ignored when `mock_repositories == true`, this flag is used in local development only
    env_configuration = true

    UI.user_error!("Invalid file_format: #{file_format}") unless ["aab", "apk"].include? file_format
    UI.user_error!("Invalid build_mode: #{build_mode}") unless ["release", "profile", "debug"].include? build_mode

    file_format_command = file_format == "aab" ? "appbundle" : file_format
    file_format_path = file_format == "aab" ? "bundle" : file_format

    flutter = flutter_cmd

    Dir.chdir("../wallet_app") do
      sh(*flutter, "pub", "get")

      sh(*flutter, "pub", "run", "rename", "--target", "android", "--bundleId", package_name)
      sh(*flutter, "pub", "run", "rename", "--target", "android", "--appname", app_name)

      sh(*flutter, "build", file_format_command, "--build-number", build.to_s, "--build-name", version.to_s, "--#{build_mode}", "--dart-define=MOCK_REPOSITORIES=#{mock}", "--dart-define=ENV_CONFIGURATION=#{env_configuration}", "--dart-define=UL_HOSTNAME=#{ul_hostname}")
      sh("mv", "build/app/outputs/#{file_format_path}/#{build_mode}/app-#{build_mode}.#{file_format}", "../#{package_name}-#{version}-#{build_mode}.#{file_format}")
    end
  end

  desc "Deploy Android app from GitLab CI"
  lane :ci_deploy do |options|
    json_key_data = ENV["JSON_KEY_DATA"]
    UI.user_error!("No JSON_KEY_DATA environment variable set") unless json_key_data

    package_name = options[:package_name]
    UI.user_error!("No package_name or package_name option set") unless package_name

    # retrieve local version
    local_version, _ = get_local_version_and_build

    # upload non-mock app
    version = ci_get_version
    upload_to_play_store_internal_track(package_name: package_name, version: version || local_version, json_key_data: json_key_data)
  end

  desc "Upload Android app to BrowserStack from GitLab CI"
  lane :ci_browserstack do |options|
    package_name = options[:package_name]
    UI.user_error!("No package_name or package_name option set") unless package_name

    version = ci_get_version
    local_version, local_build = get_local_version_and_build

    browserstack_user = ENV["BROWSERSTACK_USER"]
    browserstack_key = ENV["BROWSERSTACK_KEY"]

    browserstack(
      file: "#{package_name}-#{version || local_version}-profile.apk",
      user: browserstack_user,
      key: browserstack_key,
      package_name: package_name
    )
  end

  desc "Upload Android app to BrowserStack"
  lane :browserstack do |options|
    file = options[:file]
    user = options[:user]
    key = options[:key]
    package_name = options[:package_name]

    upload_to_browserstack(file: file, user: user, key: key, custom_id: "NLWalletAndroid_#{package_name}")
  end
end

platform :ios do
  desc "Build iOS app from GitLab CI"
  lane :ci_build do |options|
    build = ci_get_build
    version = ci_get_version
    match_basic_auth = ci_get_basic_auth
    match_keychain_password = ENV["MATCH_KEYCHAIN_PASSWORD"]

    options[:build] = build
    options[:version] = version
    options[:app_store] = true
    options[:match_basic_auth] = match_basic_auth
    options[:keychain_password] = match_keychain_password

    build(options)
  end

#   desc "Deploy iOS app from GitLab CI"
#   lane :ci_deploy do
#     app_identifier, version, suffix = ci_get_version
#
#     api_key_secrets = ci_get_k8s_secrets(name: "nl-wallet-app-store-api-key")
#     api_key = app_store_connect_api_key(
#       key_id: api_key_secrets["key_id"],
#       issuer_id: api_key_secrets["issuer_id"],
#       key_content: api_key_secrets["private_key"]
#     )
#
#     deploy(bundle_id: app_identifier)
#   end
#
#   desc "Upload iOS app to BrowserStack from GitLab CI"
#   lane :ci_browserstack do
#     ipa_file = get_newest_file(extension: "ipa")
#     credentials = ci_get_k8s_secrets(name: "nl-wallet-browserstack")
#
#     browserstack(ipa_file: ipa_file, user: credentials["user"], key: credentials["key"])
#   end

  desc "Test iOS app"
  lane :test do
    run_tests(
      project: "wallet_core/platform_support/ios/PlatformSupport.xcodeproj",
      scheme: "PlatformSupport",
      device: "iPhone SE (3rd generation)"
    )
  end

  desc "Build and sign iOS app"
  lane :build do |options|
    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") unless bundle_id

    app_name = options[:app_name]
    UI.user_error!("No app_name option set") unless app_name

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version] || local_version
    build_mode = options[:build_mode] || "release"

    UI.user_error!("Invalid build_mode: #{build_mode}") unless ["release", "profile", "debug"].include? build_mode

    flutter = flutter_cmd

    Dir.chdir("../wallet_app") do
      sh(*flutter, "pub", "get")

      sh(*flutter, "pub", "run", "rename", "--target", "ios", "--bundleId", bundle_id)
      sh(*flutter, "pub", "run", "rename", "--target", "ios", "--appname", app_name)

      sh(*flutter, "build", "ipa", "--build-number", build.to_s, "--build-name", version.to_s, "--no-codesign", "--#{build_mode}")
    end

    match(
      type: options[:app_store] ? "appstore" : "adhoc",
      readonly: true,
      git_basic_authorization: options[:match_basic_auth],
      keychain_password: options[:keychain_password]
    )
    build_app(
      skip_build_archive: true,
      archive_path: "wallet_app/build/ios/archive/Runner.xcarchive",
      output_name: "#{bundle_id}-#{version}.ipa"
    )
  end

  desc "Deploy iOS app"
  lane :deploy do |options|
    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") unless bundle_id

    upload_to_testflight(skip_submission: true, app_identifier: bundle_id)
  end

  desc "Upload iOS app to BrowserStack"
  lane :browserstack do |options|
    ipa_file = options[:ipa_file]
    user = options[:user]
    key = options[:key]

    upload_to_browserstack(file: ipa_file, user: user, key: key, custom_id: "NLWalletIos")
  end
end
