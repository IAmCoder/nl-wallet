# taken from previous GitHub repository
BUILD_OFFSET = 861
INTERNAL_APP_IDENTIFIER = "nl.ictu.edi.wallet"
BRANCH_IDENTIFER_MAP = { "main" => "latest" }
APP_NAME = "NL Wallet"

# opt out of analytics
opt_out_usage

# do not generate README.md
skip_docs

private_lane :get_app_identifier do
  app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
  UI.user_error!("No app_identifier set") unless app_identifier

  app_identifier
end

private_lane :get_local_version_and_build do
  Dir.chdir("..") do
    YAML.load_file("wallet_app/pubspec.yaml")["version"].split("+", 2)
  end
end

private_lane :ci_get_build do
  pipeline_id = ENV["CI_PIPELINE_IID"]
  UI.user_error!("No CI_PIPELINE_IID environment variable set") unless pipeline_id

  pipeline_id.to_i + BUILD_OFFSET
end

private_lane :ci_get_app_identifier_version_and_suffix do
  ref_name = ENV["CI_COMMIT_REF_NAME"]
  UI.user_error!("No CI_COMMIT_REF_NAME environment variable set") unless ref_name

  release, version = ref_name.match(/([^\/]+)(?:\/(\d+\.\d+\.\d+))?$/)&.captures

  suffix = BRANCH_IDENTIFER_MAP[release] || release unless release == "release"
  app_identifier = "#{INTERNAL_APP_IDENTIFIER}.#{suffix}" unless suffix.nil?

  [app_identifier, version, suffix]
end

private_lane :ci_get_basic_auth do
  registry_user = ENV["CI_REGISTRY_USER"]
  UI.user_error!("No CI_REGISTRY_USER environment variable set") unless registry_user

  job_token = ENV["CI_JOB_TOKEN"]
  UI.user_error!("No CI_JOB_TOKEN environment variable set") unless job_token

  Base64.strict_encode64("#{registry_user}:#{job_token}")
end

private_lane :ci_get_k8s_secrets do |options|
  secrets = sh("kubectl", "get", "secret", options[:name], "-o" ,"jsonpath=\"{.data}\"", log: false)

  JSON.parse(secrets[1...-1]).map { |key, value| [key, Base64.strict_decode64(value)] }.to_h
end

private_lane :ci_get_k8s_secret_file do |options|
  secrets = sh("kubectl", "get", "secret", options[:name], "-o" ,"jsonpath=\"{.data.#{options[:key]}}\"", log: false)

  Dir.chdir("..") do
    File.write(options[:path], Base64.strict_decode64(secrets[1...-1]))
  end
end

private_lane :get_newest_file do |options|
  Dir.chdir("..") do
    Dir.glob("*.#{options[:extension]}").max_by {|f| File.mtime(f)}
  end
end

private_lane :upload_to_browserstack do |options|
  Dir.chdir("..") do
    sh("curl", "-u", "#{options[:user]}:#{options[:key]}", "-X", "POST", "https://api-cloud.browserstack.com/app-automate/upload", "-F", "file=@#{options[:file]}", "-F", "custom_id=#{options[:custom_id]}", log: false)
  end
end

lane :disable_flutter_analytics do 
  sh("dart", "--disable-analytics")
  sh("flutter", "config", "--no-analytics")
end

platform :android do
  desc "Build release and profile versions of Android app from GitLab CI"
  lane :ci_build do
    build = ci_get_build
    app_identifier, version, suffix = ci_get_app_identifier_version_and_suffix

    ci_get_k8s_secret_file(name: "nl-wallet-play-store-upload-key", key: "keystore", path: "wallet_app/android/upload-keystore.jks")
    ci_get_k8s_secret_file(name: "nl-wallet-play-store-upload-key", key: "key-properties", path: "wallet_app/android/key.properties")

    # TODO: do not sign profile build
    build(package_name: app_identifier, build: build, version: version, name_suffix: suffix, build_mode: "release")
    build(package_name: app_identifier, build: build, version: version, name_suffix: suffix, build_mode: "profile")
  end

  desc "Deploy Android app from GitLab CI"
  lane :ci_deploy do
    key_file = "play-store-key.json"
    
    app_identifier, version, suffix = ci_get_app_identifier_version_and_suffix
    local_version, local_build = get_local_version_and_build

    ci_get_k8s_secret_file(name: "nl-wallet-play-store-api-key", key: "json", path: key_file)

    upload_to_play_store(
      package_name: app_identifier,
      track: "internal",
      json_key: key_file,
      aab: "#{app_identifier}-#{version || local_version}-release.aab"
    )

    Dir.chdir("..") do
      sh("rm", key_file)
    end
  end

  desc "Upload Android app to BrowserStack from GitLab CI"
  lane :ci_browserstack do
    app_identifier, version, suffix = ci_get_app_identifier_version_and_suffix
    local_version, local_build = get_local_version_and_build

    credentials = ci_get_k8s_secrets(name: "nl-wallet-browserstack")

    browserstack(
      aab_file: "#{app_identifier}-#{version || local_version}-profile.aab",
      user: credentials["user"],
      key: credentials["key"]
    )
  end

  desc "Build and sign Android app"
  lane :build do |options|
    package_name = options[:package_name] || get_app_identifier
    UI.user_error!("No app_identifier or package_name option set") unless package_name

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version] || local_version
    name_suffix = options[:name_suffix]
    build_mode = options[:build_mode] || "release"

    UI.user_error!("Invalid build_mode: #{build_mode}") unless ["release", "profile", "debug"].include? build_mode

    Dir.chdir("../wallet_app") do
      sh("flutter", "pub", "get")

      sh("flutter", "pub", "run", "rename", "--target", "android", "--bundleId", package_name)
      sh("flutter", "pub", "run", "rename", "--target", "android", "--appname", name_suffix.nil? ? APP_NAME : "#{APP_NAME} (#{name_suffix})")

      sh("flutter", "build", "appbundle", "--build-number", build.to_s, "--build-name", version.to_s, "--#{build_mode}")
      sh("mv", "build/app/outputs/bundle/#{build_mode}/app-#{build_mode}.aab", "../#{package_name}-#{version}-#{build_mode}.aab")
    end
  end

  desc "Upload Android app to BrowserStack"
  lane :browserstack do |options|
    aab_file = options[:aab_file]
    user = options[:user]
    key = options[:key]

    upload_to_browserstack(file: aab_file, user: user, key: key, custom_id: "NLWalletAndroid")
  end
end

platform :ios do
  desc "Build iOS app from GitLab CI"
  lane :ci_build do
    build = ci_get_build
    app_identifier, version, suffix = ci_get_app_identifier_version_and_suffix
    match_basic_auth = ci_get_basic_auth

    ENV["MATCH_PASSWORD"] = ci_get_k8s_secrets(name: "nl-wallet-fastlane-match")["password"]

    build(
      bundle_id: app_identifier,
      build: build,
      version: version,
      name_suffix: suffix,
      app_store: true,
      match_basic_auth: match_basic_auth,
      keychain_password: "admin" # hardcoded for now
    )
  end

  desc "Deploy iOS app from GitLab CI"
  lane :ci_deploy do
    app_identifier, version, suffix = ci_get_app_identifier_version_and_suffix

    api_key_secrets = ci_get_k8s_secrets(name: "nl-wallet-app-store-api-key")
    api_key = app_store_connect_api_key(
      key_id: api_key_secrets["key_id"],
      issuer_id: api_key_secrets["issuer_id"],
      key_content: api_key_secrets["private_key"]
    )

    deploy(bundle_id: app_identifier)
  end

  desc "Upload iOS app to BrowserStack from GitLab CI"
  lane :ci_browserstack do
    ipa_file = get_newest_file(extension: "ipa")
    credentials = ci_get_k8s_secrets(name: "nl-wallet-browserstack")

    browserstack(ipa_file: ipa_file, user: credentials["user"], key: credentials["key"])
  end

  desc "Test iOS app"
  lane :test do
    run_tests(
      project: "wallet_core/platform_support/ios/PlatformSupport.xcodeproj",
      scheme: "PlatformSupport",
      device: "iPhone SE (3rd generation)"
    )
  end

  desc "Build iOS app"
  lane :build do |options|
    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") unless bundle_id

    local_version, local_build = get_local_version_and_build
    build = options[:build] || local_build
    version = options[:version] || local_version
    name_suffix = options[:name_suffix]

    Dir.chdir("../wallet_app") do
      sh("flutter", "pub", "get")

      sh("flutter", "pub", "run", "rename", "--target", "ios", "--bundleId", bundle_id)
      sh("flutter", "pub", "run", "rename", "--target", "ios", "--appname", name_suffix.nil? ? APP_NAME : "#{APP_NAME} (#{name_suffix})")

      sh("flutter", "build", "ipa", "--build-number", build.to_s, "--build-name", version.to_s, "--no-codesign")
    end

    match(
      type: options[:app_store] ? "appstore" : "adhoc",
      readonly: true,
      git_basic_authorization: options[:match_basic_auth],
      keychain_password: options[:keychain_password]
    )
    build_app(
      skip_build_archive: true,
      archive_path: "wallet_app/build/ios/archive/Runner.xcarchive",
      output_name: "#{bundle_id}-#{version}.ipa"
    )
  end

  desc "Deploy iOS app"
  lane :deploy do |options|
    bundle_id = options[:bundle_id] || get_app_identifier
    UI.user_error!("No app_identifier or bundle_id option set") unless bundle_id

    upload_to_testflight(skip_submission: true, app_identifier: bundle_id)
  end

  desc "Upload iOS app to BrowserStack"
  lane :browserstack do |options|
    ipa_file = options[:ipa_file]
    user = options[:user]
    key = options[:key]

    upload_to_browserstack(file: ipa_file, user: user, key: key, custom_id: "NLWalletIos")
  end
end
